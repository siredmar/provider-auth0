name: auth0/auth0
resources:
    auth0_action:
        subCategory: ""
        description: Actions are secure, tenant-specific, versioned functions written in Node.js that execute at certain points during the Auth0 runtime. Actions are used to customize and extend Auth0's capabilities with custom logic.
        name: auth0_action
        title: auth0_action
        examples:
            - name: my_action
              manifest: |-
                {
                  "code": "/**\n * Handler that will be called during the execution of a PostLogin flow.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n */\n exports.onExecutePostLogin = async (event, api) =\u003e {\n   console.log(event);\n };\n",
                  "dependencies": [
                    {
                      "name": "lodash",
                      "version": "latest"
                    },
                    {
                      "name": "request",
                      "version": "latest"
                    }
                  ],
                  "deploy": true,
                  "name": "${format(\"Test Action %s\", timestamp())}",
                  "runtime": "node18",
                  "secrets": [
                    {
                      "name": "FOO",
                      "value": "Foo"
                    },
                    {
                      "name": "BAR",
                      "value": "Bar"
                    }
                  ],
                  "supported_triggers": [
                    {
                      "id": "post-login",
                      "version": "v3"
                    }
                  ]
                }
        argumentDocs:
            code: (String) The source code of the action.
            dependencies: (Block Set) List of third party npm modules, and their versions, that this action depends on. (see below for nested schema)
            deploy: (Boolean) Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.
            id: (String) The ID of this resource.
            name: (String) The name of the action.
            runtime: '(String) The Node runtime. Possible values are: node12, node16 (not recommended), node18, node22'
            secrets: (Block Set) List of secrets that are included in an action or a version of an action. Partial management of secrets is not supported. If the secret block is edited, the whole object is re-provisioned. (see below for nested schema)
            supported_triggers: '(Block List, Min: 1, Max: 1) List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read Retrieving the set of triggers available within actions to retrieve the latest trigger versions supported. (see below for nested schema)'
            value: (String, Sensitive) Secret value.
            version: (String) The trigger version. This regulates which runtime versions are supported.
            version_id: (String) Version ID of the action. This value is available if deploy is set to true.
        importStatements:
            - |-
              # This resource can be imported by specifying the action ID.
              #
              # Example:
              terraform import auth0_action.my_action "12f4f21b-017a-319d-92e7-2291c1ca36c4"
    auth0_attack_protection:
        subCategory: ""
        description: Auth0 can detect attacks and stop malicious attempts to access your application such as blocking traffic from certain IPs and displaying CAPTCHAs.
        name: auth0_attack_protection
        title: auth0_attack_protection
        examples:
            - name: my_protection
              manifest: |-
                {
                  "breached_password_detection": [
                    {
                      "admin_notification_frequency": [
                        "daily"
                      ],
                      "enabled": true,
                      "method": "standard",
                      "pre_change_password": [
                        {
                          "shields": [
                            "block",
                            "admin_notification"
                          ]
                        }
                      ],
                      "pre_user_registration": [
                        {
                          "shields": [
                            "block"
                          ]
                        }
                      ],
                      "shields": [
                        "admin_notification",
                        "block"
                      ]
                    }
                  ],
                  "brute_force_protection": [
                    {
                      "allowlist": [
                        "127.0.0.1"
                      ],
                      "enabled": true,
                      "max_attempts": 5,
                      "mode": "count_per_identifier_and_ip",
                      "shields": [
                        "block",
                        "user_notification"
                      ]
                    }
                  ],
                  "suspicious_ip_throttling": [
                    {
                      "allowlist": [
                        "192.168.1.1"
                      ],
                      "enabled": true,
                      "pre_login": [
                        {
                          "max_attempts": 100,
                          "rate": 864000
                        }
                      ],
                      "pre_user_registration": [
                        {
                          "max_attempts": 50,
                          "rate": 1200
                        }
                      ],
                      "shields": [
                        "admin_notification",
                        "block"
                      ]
                    }
                  ]
                }
        argumentDocs:
            admin_notification_frequency: '(Set of String) When admin_notification is enabled within the shields property, determines how often email notifications are sent. Possible values: immediately, daily, weekly, monthly.'
            allowlist: (Set of String) List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
            breached_password_detection: '(Block List, Max: 1) Breached password detection protects your applications from bad actors logging in with stolen credentials. (see below for nested schema)'
            brute_force_protection: '(Block List, Max: 1) Brute-force protection safeguards against a single IP address attacking a single user account. (see below for nested schema)'
            enabled: (Boolean) Whether breached password detection is active.
            id: (String) The ID of this resource.
            max_attempts: (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
            method: '(String) The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: standard, enhanced.'
            mode: '(String) Determines whether the IP address is used when counting failed attempts. Possible values: count_per_identifier_and_ip (lockout an account from a given IP Address) or count_per_identifier (lockout an account regardless of IP Address).'
            pre_change_password: '(Block List, Max: 1) Configuration options that apply before every password change attempt. (see below for nested schema)'
            pre_login: '(Block List, Max: 1) Configuration options that apply before every login attempt. Only available on public tenants. (see below for nested schema)'
            pre_user_registration: '(Block List, Max: 1) Configuration options that apply before every user registration attempt. Only available on public tenants. (see below for nested schema)'
            rate: (Number) Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
            shields: '(Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).'
            suspicious_ip_throttling: '(Block List, Max: 1) Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups. (see below for nested schema)'
        importStatements:
            - |-
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # attack_protection can be imported using a random string.
              #
              # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
              #
              # Example:
              terraform import auth0_attack_protection.my_protection "24940d4b-4bd4-44e7-894e-f92e4de36a40"
    auth0_branding:
        subCategory: ""
        description: This resource allows you to manage branding within your Auth0 tenant. Auth0 can be customized with a look and feel that aligns with your organization's brand requirements and user expectations.
        name: auth0_branding
        title: auth0_branding
        examples:
            - name: my_brand
              manifest: |-
                {
                  "colors": [
                    {
                      "page_background": "#000000",
                      "primary": "#0059d6"
                    }
                  ],
                  "logo_url": "https://mycompany.org/logo.png",
                  "universal_login": [
                    {
                      "body": "${file(\"universal_login_body.html\")}"
                    }
                  ]
                }
        argumentDocs:
            body: (String) The html template for the New Universal Login Experience.
            colors: '(Block List, Max: 1) Configuration settings for colors for branding. (see below for nested schema)'
            favicon_url: (String) URL for the favicon.
            font: '(Block List, Max: 1) Configuration settings to customize the font. (see below for nested schema)'
            id: (String) The ID of this resource.
            logo_url: (String) URL of logo for branding.
            page_background: (String) Background color of login pages in hexadecimal.
            primary: (String) Primary button background color in hexadecimal.
            universal_login: '(Block List, Max: 1) Configuration settings for Universal Login. (see below for nested schema)'
            url: (String) URL for the custom font.
        importStatements:
            - |-
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # branding can be imported using a random string.
              #
              # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
              #
              # Example:
              terraform import auth0_branding.my_brand "22f4f21b-017a-319d-92e7-2291c1ca36c4"
    auth0_branding_theme:
        subCategory: ""
        description: This resource allows you to manage branding themes for your Universal Login page within your Auth0 tenant.
        name: auth0_branding_theme
        title: auth0_branding_theme
        examples:
            - name: my_theme
              manifest: |-
                {
                  "borders": [
                    {}
                  ],
                  "colors": [
                    {}
                  ],
                  "fonts": [
                    {
                      "body_text": [
                        {}
                      ],
                      "buttons_text": [
                        {}
                      ],
                      "input_labels": [
                        {}
                      ],
                      "links": [
                        {}
                      ],
                      "subtitle": [
                        {}
                      ],
                      "title": [
                        {}
                      ]
                    }
                  ],
                  "page_background": [
                    {}
                  ],
                  "widget": [
                    {}
                  ]
                }
            - name: my_theme
              manifest: |-
                {
                  "borders": [
                    {
                      "button_border_radius": 1,
                      "button_border_weight": 1,
                      "buttons_style": "pill",
                      "input_border_radius": 3,
                      "input_border_weight": 1,
                      "inputs_style": "pill",
                      "show_widget_shadow": false,
                      "widget_border_weight": 1,
                      "widget_corner_radius": 3
                    }
                  ],
                  "colors": [
                    {
                      "body_text": "#FF00CC",
                      "error": "#FF00CC",
                      "header": "#FF00CC",
                      "icons": "#FF00CC",
                      "input_background": "#FF00CC",
                      "input_border": "#FF00CC",
                      "input_filled_text": "#FF00CC",
                      "input_labels_placeholders": "#FF00CC",
                      "links_focused_components": "#FF00CC",
                      "primary_button": "#FF00CC",
                      "primary_button_label": "#FF00CC",
                      "secondary_button_border": "#FF00CC",
                      "secondary_button_label": "#FF00CC",
                      "success": "#FF00CC",
                      "widget_background": "#FF00CC",
                      "widget_border": "#FF00CC"
                    }
                  ],
                  "fonts": [
                    {
                      "body_text": [
                        {
                          "bold": false,
                          "size": 100
                        }
                      ],
                      "buttons_text": [
                        {
                          "bold": false,
                          "size": 100
                        }
                      ],
                      "font_url": "https://google.com/font.woff",
                      "input_labels": [
                        {
                          "bold": false,
                          "size": 100
                        }
                      ],
                      "links": [
                        {
                          "bold": false,
                          "size": 100
                        }
                      ],
                      "links_style": "normal",
                      "reference_text_size": 12,
                      "subtitle": [
                        {
                          "bold": false,
                          "size": 100
                        }
                      ],
                      "title": [
                        {
                          "bold": false,
                          "size": 100
                        }
                      ]
                    }
                  ],
                  "page_background": [
                    {
                      "background_color": "#000000",
                      "background_image_url": "https://google.com/background.png",
                      "page_layout": "center"
                    }
                  ],
                  "widget": [
                    {
                      "header_text_alignment": "center",
                      "logo_height": 55,
                      "logo_position": "center",
                      "logo_url": "https://google.com/logo.png",
                      "social_buttons_layout": "top"
                    }
                  ]
                }
        argumentDocs:
            background_color: '(String) Background color. Defaults to #000000.'
            background_image_url: (String) Background image url. Defaults to an empty string.
            base_focus_color: '(String) Base focus color. Defaults to #635dff.'
            base_hover_color: '(String) Base hover color. Defaults to #000000.'
            body_text: '(String) Body text. Defaults to #1e212a.'
            bold: (Boolean) Body text bold. Defaults to false.
            borders: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            button_border_radius: (Number) Button border radius. Value needs to be between 1 and 10. Defaults to 3.0.
            button_border_weight: (Number) Button border weight. Value needs to be between 0 and 10. Defaults to 1.0.
            buttons_style: '(String) Buttons style. Available options: pill, rounded, sharp. Defaults to rounded.'
            buttons_text: '(Block List, Min: 1, Max: 1) Buttons text. (see below for nested schema)'
            captcha_widget_theme: (String) Captcha Widget Theme.
            colors: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            display_name: (String) The display name for the branding theme.
            error: '(String) Error. Defaults to #d03c38.'
            font_url: (String) Font URL. Defaults to an empty string.
            fonts: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            header: '(String) Header. Defaults to #1e212a.'
            header_text_alignment: '(String) Header text alignment. Available options: center, left, right. Defaults to center.'
            icons: '(String) Icons. Defaults to #65676e.'
            id: (String) The ID of this resource.
            input_background: '(String) Input background. Defaults to #ffffff.'
            input_border: '(String) Input border. Defaults to #c9cace.'
            input_border_radius: (Number) Input border radius. Value needs to be between 0 and 10. Defaults to 3.0.
            input_border_weight: (Number) Input border weight. Value needs to be between 0 and 3. Defaults to 1.0.
            input_filled_text: '(String) Input filled text. Defaults to #000000.'
            input_labels: '(Block List, Min: 1, Max: 1) Input labels. (see below for nested schema)'
            input_labels_placeholders: '(String) Input labels & placeholders. Defaults to #65676e.'
            inputs_style: '(String) Inputs style. Available options: pill, rounded, sharp. Defaults to rounded.'
            links: '(Block List, Min: 1, Max: 1) Links. (see below for nested schema)'
            links_focused_components: '(String) Links & focused components. Defaults to #635dff.'
            links_style: (String) Links style. Defaults to normal.
            logo_height: (Number) Logo height. Value needs to be between 1 and 100. Defaults to 52.0.
            logo_position: '(String) Logo position. Available options: center, left, right, none. Defaults to center.'
            logo_url: (String) Logo url. Defaults to an empty string.
            page_background: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            page_layout: '(String) Page layout. Available options: center, left, right. Defaults to center.'
            primary_button: '(String) Primary button. Defaults to #635dff.'
            primary_button_label: '(String) Primary button label. Defaults to #ffffff.'
            reference_text_size: (Number) Reference text size. Value needs to be between 12 and 24. Defaults to 16.0.
            secondary_button_border: '(String) Secondary button border. Defaults to #c9cace.'
            secondary_button_label: '(String) Secondary button label. Defaults to #1e212a.'
            show_widget_shadow: (Boolean) Show widget shadow. Defaults to true.
            size: (Number) Body text size. Value needs to be between 0 and 150. Defaults to 87.5.
            social_buttons_layout: '(String) Social buttons layout. Available options: bottom, top. Defaults to bottom.'
            subtitle: '(Block List, Min: 1, Max: 1) Subtitle. (see below for nested schema)'
            success: '(String) Success. Defaults to #13a688.'
            title: '(Block List, Min: 1, Max: 1) Title. (see below for nested schema)'
            widget: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            widget_background: '(String) Widget background. Defaults to #ffffff.'
            widget_border: '(String) Widget border. Defaults to #c9cace.'
            widget_border_weight: (Number) Widget border weight. Value needs to be between 0 and 10. Defaults to 0.0.
            widget_corner_radius: (Number) Widget corner radius. Value needs to be between 0 and 50. Defaults to 5.0.
        importStatements:
            - |-
              # This resource can be imported by specifying the Branding Theme ID.
              #
              # Example:
              terraform import auth0_branding_theme.my_theme "XXXXXXXXXXXXXXXXXXXX"
    auth0_client:
        subCategory: ""
        description: With this resource, you can set up applications that use Auth0 for authentication and configure allowed callback URLs and secrets for these applications.
        name: auth0_client
        title: auth0_client
        examples:
            - name: my_client
              manifest: |-
                {
                  "addons": [
                    {
                      "samlp": [
                        {
                          "audience": "https://example.com/saml",
                          "create_upn_claim": false,
                          "issuer": "https://example.com",
                          "map_identities": false,
                          "map_unknown_claims_as_is": false,
                          "mappings": {
                            "email": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            "name": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
                          },
                          "name_identifier_format": "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                          "name_identifier_probes": [
                            "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
                          ],
                          "passthrough_claims_with_no_mapping": false,
                          "signing_cert": "-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n"
                        }
                      ]
                    }
                  ],
                  "allowed_logout_urls": [
                    "https://example.com"
                  ],
                  "allowed_origins": [
                    "https://example.com"
                  ],
                  "app_type": "non_interactive",
                  "callbacks": [
                    "https://example.com/callback"
                  ],
                  "client_metadata": {
                    "foo": "zoo"
                  },
                  "compliance_level": "none",
                  "custom_login_page_on": true,
                  "description": "Test Applications Long Description",
                  "grant_types": [
                    "authorization_code",
                    "http://auth0.com/oauth/grant-type/password-realm",
                    "implicit",
                    "password",
                    "refresh_token"
                  ],
                  "is_first_party": true,
                  "is_token_endpoint_ip_header_trusted": true,
                  "jwt_configuration": [
                    {
                      "alg": "RS256",
                      "lifetime_in_seconds": 300,
                      "scopes": {
                        "foo": "bar"
                      },
                      "secret_encoded": true
                    }
                  ],
                  "mobile": [
                    {
                      "ios": [
                        {
                          "app_bundle_identifier": "com.my.bundle.id",
                          "team_id": "9JA89QQLNQ"
                        }
                      ]
                    }
                  ],
                  "name": "Application - Acceptance Test",
                  "oidc_conformant": false,
                  "refresh_token": [
                    {
                      "expiration_type": "expiring",
                      "leeway": 0,
                      "rotation_type": "rotating",
                      "token_lifetime": 2592000
                    }
                  ],
                  "require_proof_of_possession": false,
                  "web_origins": [
                    "https://example.com"
                  ]
                }
            - name: my_client
              manifest: |-
                {
                  "app_type": "native",
                  "mobile": [
                    {
                      "android": [
                        {
                          "app_package_name": "com.example",
                          "sha256_cert_fingerprints": [
                            "DE:AD:BE:EF"
                          ]
                        }
                      ],
                      "ios": [
                        {
                          "app_bundle_identifier": "com.my.bundle.id",
                          "team_id": "9JA89QQLNQ"
                        }
                      ]
                    }
                  ],
                  "name": "Acceptance Test - Mobile",
                  "native_social_login": [
                    {
                      "apple": [
                        {
                          "enabled": true
                        }
                      ],
                      "facebook": [
                        {
                          "enabled": false
                        }
                      ],
                      "google": [
                        {
                          "enabled": true
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            account: (String) Your New Relic Account ID found in your New Relic URL after the /accounts/ path, for example https://rpm.newrelic.com/accounts/123456/query would be 123456.
            account_name: (String) Your Azure storage account name. Usually first segment in your Azure storage URL, for example https://acme-org.blob.core.windows.net would be the account name acme-org.
            acs_url: (String) SpringCM ACS URL, for example https://na11.springcm.com/atlas/sso/SSOEndpoint.ashx.
            addons: '(Block List, Max: 1) Addons enabled for this client and their associated configurations. (see below for nested schema)'
            alg: (String) Algorithm used to sign JWTs. Can be one of HS256, RS256, PS256.
            allow_any_profile_of_type: (List of String) List of allowed profile types for token exchange
            allow_refresh_token: (Boolean) Indicates whether the application is allowed to use a refresh token when using a session_transfer_token session.
            allowed_authentication_methods: (Set of String)
            allowed_clients: (List of String) List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.
            allowed_logout_urls: (List of String) URLs that Auth0 may redirect to after logout.
            allowed_origins: (List of String) URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.
            android: '(Block List, Max: 1) Configuration settings for Android native apps. (see below for nested schema)'
            app_bundle_identifier: (String)
            app_package_name: (String)
            app_type: '(String) Type of application the client represents. Possible values are: native, spa, regular_web, non_interactive, sso_integration. Specific SSO integrations types accepted as well are: rms, box, cloudbees, concur, dropbox, mscrm, echosign, egnyte, newrelic, office365, salesforce, sentry, sharepoint, slack, springcm, zendesk, zoom.'
            apple: '(Block List, Max: 1) (see below for nested schema)'
            audience: (String) Audience of the SAML Assertion. Default will be the Issuer on SAMLRequest.
            authn_context_class_ref: (String) Class reference of the authentication context.
            aws: '(Block List, Max: 1) AWS Addon configuration. (see below for nested schema)'
            azure_blob: '(Block List, Max: 1) Azure Blob Storage Addon configuration. (see below for nested schema)'
            azure_sb: '(Block List, Max: 1) Azure Storage Bus Addon configuration. (see below for nested schema)'
            backchannel_logout_initiators: '(Block List, Max: 1) Configure OIDC logout initiators for the Client (see below for nested schema)'
            backchannel_logout_urls: (Set of String) Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.
            base_url: (String) URL prefix only if running Sentry Community Edition, otherwise leave empty.
            binding: (String) Protocol binding used for SAML logout responses.
            blob_delete: (Boolean) Indicates if the issued token has permission to delete the blob.
            blob_name: (String) Entity to request a token for, such as my-blob. If blank the computed SAS will apply to the entire storage container.
            blob_read: (Boolean) Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
            blob_write: (Boolean) Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
            box: '(Block List, Max: 1) Box SSO indicator (no configuration settings needed for Box SSO). (see below for nested schema)'
            callback: (String) The service provider (client application)'s Single Logout Service URL, where Auth0 will send logout requests and responses.
            callbacks: (List of String) URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.
            can_create_session_transfer_token: (Boolean) Indicates whether the application(Native app) can use the Token Exchange endpoint to create a session_transfer_token
            client_aliases: (List of String) List of audiences/realms for SAML protocol. Used by the wsfed addon.
            client_credentials: '(Block List, Min: 1, Max: 1) The token quota configuration for client credentials. (see below for nested schema)'
            client_email: (String) ID of the Service Account you have created (shown as client_email in the generated JSON file, SDK v3+ tokens only).
            client_id: (String) The ID of the client.
            client_metadata: '(Map of String) Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: :,-+=_*?"/\()<>@ [Tab] [Space].'
            cloudbees: '(Block List, Max: 1) CloudBees SSO indicator (no configuration settings needed for CloudBees SSO). (see below for nested schema)'
            community_name: (String) Community name.
            community_url_section: (String) Community URL section.
            compliance_level: (String) Defines the compliance level for this client, which may restrict it's capabilities. Can be one of none, fapi1_adv_pkj_par, fapi1_adv_mtls_par.
            concur: '(Block List, Max: 1) Concur SSO indicator (no configuration settings needed for Concur SSO). (see below for nested schema)'
            connection: (String) Optional Auth0 database connection for testing an already-configured Office 365 tenant.
            container_delete: (Boolean) Indicates if issued token has permission to delete any blob in the container.
            container_list: (Boolean) Indicates if the issued token has permission to list blobs in the container.
            container_name: (String) Container to request a token for, such as my-container.
            container_read: (Boolean) Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
            container_write: (Boolean) Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
            create_upn_claim: (Boolean) Indicates whether a UPN claim should be created. Defaults to true.
            cross_origin_auth: (Boolean) Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false).
            cross_origin_loc: (String) URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.
            custom_login_page: (String) The content (HTML, CSS, JS) of the custom login page.
            custom_login_page_on: (Boolean) Indicates whether a custom login page is to be used.
            default_organization: '(Block List, Max: 1) Configure and associate an organization with the Client (see below for nested schema)'
            description: (String) Description of the purpose of the client.
            destination: (String) Destination of the SAML Response. If not specified, it will be AssertionConsumerUrl of SAMLRequest or callback URL if there was no SAMLRequest.
            digest_algorithm: (String) Algorithm used to calculate the digest of the SAML Assertion or response. Options include sha1 and sha256. Defaults to sha1.
            disable: (Boolean) If set, the default_organization will be removed.
            domain: (String) Your custom domain found in your EchoSign URL, for example https://acme-org.echosign.com would be acme-org.
            dropbox: '(Block List, Max: 1) Dropbox SSO indicator (no configuration settings needed for Dropbox SSO). (see below for nested schema)'
            echosign: '(Block List, Max: 1) Adobe EchoSign SSO configuration. (see below for nested schema)'
            egnyte: '(Block List, Max: 1) Egnyte SSO configuration. (see below for nested schema)'
            enabled: (Boolean)
            encryption_key: (Map of String) Encryption used for WS-Fed responses with this client.
            enforce: (Boolean) If enabled, the quota will be enforced and requests in excess of the quota will fail. If disabled, the quota will not be enforced, but notifications for requests exceeding the quota will be available in logs.
            enforce_device_binding: (String) Configures the level of device binding enforced when a session_transfer_token is consumed. Can be one of ip, asn or none.
            entity_id: (String) Arbitrary logical URL that identifies the Saleforce resource, for example https://acme-org.com.
            entity_path: (String) Entity you want to request a token for, such as my-queue.
            expiration: (Number) Expiration in minutes for the generated token (default of 5 minutes).
            expiration_type: (String) Options include expiring, non-expiring. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is rotating, this must be set to expiring.
            external_url: (List of String) External SharePoint application URLs if exposed to the Internet.
            facebook: '(Block List, Max: 1) (see below for nested schema)'
            firebase: '(Block List, Max: 1) Google Firebase addon configuration. (see below for nested schema)'
            flexible_mappings: (String) This is a supporting attribute to mappings field.Please note this is an experimental field. It should only be used when needed to send a map with keys as slices.
            flows: (List of String) Definition of the flow that needs to be configured. Eg. client_credentials
            form_template: (String) HTML form template to be used for WS-Federation.
            google: '(Block List, Max: 1) (see below for nested schema)'
            grant_types: (List of String) Types of grants that this client is authorized to use.
            id: (String) The ID of this resource.
            idle_token_lifetime: (Number) The time in seconds after which inactive refresh tokens will expire.
            include_attribute_name_format: (Boolean) Indicates whether or not we should infer the NameFormat based on the attribute name. If set to false, the attribute NameFormat is not set in the assertion. Defaults to true.
            infinite_idle_token_lifetime: (Boolean) Whether inactive refresh tokens should remain valid indefinitely.
            infinite_token_lifetime: (Boolean) Whether refresh tokens should remain valid indefinitely. If false, token_lifetime should also be set.
            initiate_login_uri: (String) Initiate login URI. Must be HTTPS or an empty string.
            ios: '(Block List, Max: 1) Configuration settings for i0S native apps. (see below for nested schema)'
            is_first_party: (Boolean) Indicates whether this client is a first-party client.Defaults to true from the API
            is_token_endpoint_ip_header_trusted: (Boolean) Indicates whether the token endpoint IP header is trusted. Requires the authentication method to be set to client_secret_post or client_secret_basic. Setting this property when creating the resource, will default the authentication method to client_secret_post. To change the authentication method to client_secret_basic use the auth0_client_credentials resource.
            issuer: (String) Issuer of the SAML Assertion.
            jwt_configuration: '(Block List, Max: 1) Configuration settings for the JWTs issued for this client. (see below for nested schema)'
            key_id: (String, Sensitive) Authentication Key identifier used to sign the Layer token.
            layer: '(Block List, Max: 1) Layer addon configuration. (see below for nested schema)'
            leeway: (Number) The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.
            lifetime_in_seconds: (Number) AWS token lifetime in seconds.
            logo_uri: (String) URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.
            logout: '(Block List, Max: 1) Configuration settings for logout. (see below for nested schema)'
            map_identities: (Boolean) Indicates whether or not to add additional identity information in the token, such as the provider used and the access_token, if available. Defaults to true.
            map_unknown_claims_as_is: (Boolean) Indicates whether to add a prefix of http://schema.auth0.com to any claims that are not mapped to the common profile when passed through in the output assertion. Defaults to false.
            mappings: (Map of String) Mappings between the Auth0 user profile property name (name) and the output attributes on the SAML attribute in the assertion (value).
            master_key: (String, Sensitive) Your master key for Windows Azure Mobile Services.
            mobile: '(Block List, Max: 1) Additional configuration for native mobile apps. (see below for nested schema)'
            mode: (String) Determines the configuration method for enabling initiators. custom enables only the initiators listed in the backchannel_logout_selected_initiators set, all enables all current and future initiators.
            mscrm: '(Block List, Max: 1) Microsoft Dynamics CRM SSO configuration. (see below for nested schema)'
            name: (String) Name of the client.
            name_identifier_format: (String) Format of the name identifier. Defaults to urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified.
            name_identifier_probes: (List of String) Attributes that can be used for Subject/NameID. Auth0 will try each of the attributes of this array in order and use the first value it finds.
            namespace: (String) Your Azure Service Bus namespace. Usually the first segment of your Service Bus URL (for example https://acme-org.servicebus.windows.net would be acme-org).
            native_social_login: '(Block List, Max: 1) Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to false in order to change the app_type. (see below for nested schema)'
            newrelic: '(Block List, Max: 1) New Relic SSO configuration. (see below for nested schema)'
            office365: '(Block List, Max: 1) Microsoft Office 365 SSO configuration. (see below for nested schema)'
            oidc_backchannel_logout_urls: (Set of String, Deprecated) Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.
            oidc_conformant: (Boolean) Indicates whether this client will conform to strict OIDC specifications.
            oidc_logout: '(Block List, Max: 1) Configure OIDC logout for the Client (see below for nested schema)'
            org_slug: (String) Generated slug for your Sentry organization. Found in your Sentry URL, for example https://sentry.acme.com/acme-org/ would be acme-org.
            organization_id: (String) The unique identifier of the organization
            organization_require_behavior: (String) Defines how to proceed during an authentication transaction when organization_usage = "require". Can be no_prompt (default), pre_login_prompt or  post_login_prompt.
            organization_usage: (String) Defines how to proceed during an authentication transaction with regards to an organization. Can be deny (default), allow or require.
            passthrough_claims_with_no_mapping: (Boolean) Indicates whether or not to passthrough claims that are not mapped to the common profile in the output assertion. Defaults to true.
            per_day: (Number) Maximum number of issued tokens per day
            per_hour: (Number) Maximum number of issued tokens per hour
            policies: (Block Set) A collection of policies governing multi-resource refresh token exchange (MRRT), defining how refresh tokens can be used across different resource servers (see below for nested schema)
            principal: (String) AWS principal ARN, for example arn:aws:iam::010616021751:saml-provider/idpname.
            private_key: (String, Sensitive) Private Key for signing the token (SDK v3+ tokens only).
            private_key_id: (String, Sensitive) Optional ID of the private key to obtain the kid header claim from the issued token (SDK v3+ tokens only).
            provider_id: (String) Provider ID of your Layer account.
            recipient: (String) Recipient of the SAML Assertion (SubjectConfirmationData). Default is AssertionConsumerUrl on SAMLRequest or callback URL if no SAMLRequest was sent.
            refresh_token: '(Block List, Max: 1) Configuration settings for the refresh tokens issued for this client. (see below for nested schema)'
            require_proof_of_possession: (Boolean) Makes the use of Proof-of-Possession mandatory for this client.
            require_pushed_authorization_requests: (Boolean) Makes the use of Pushed Authorization Requests mandatory for this client. This feature currently needs to be enabled on the tenant in order to make use of it.
            rms: '(Block List, Max: 1) Active Directory Rights Management Service SSO configuration. (see below for nested schema)'
            role: (String) AWS role ARN, for example arn:aws:iam::010616021751:role/foo.
            rotation_type: (String) Options include rotating, non-rotating. When rotating, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.
            salesforce: '(Block List, Max: 1) Salesforce SSO configuration. (see below for nested schema)'
            salesforce_api: '(Block List, Max: 1) Salesforce API addon configuration. (see below for nested schema)'
            salesforce_sandbox_api: '(Block List, Max: 1) Salesforce Sandbox addon configuration. (see below for nested schema)'
            samlp: '(Block List, Max: 1) Configuration settings for a SAML add-on. (see below for nested schema)'
            sap_api: '(Block List, Max: 1) SAP API addon configuration. (see below for nested schema)'
            sas_key: (String, Sensitive) Primary Key associated with your shared access policy.
            sas_key_name: (String) Your shared access policy name defined in your Service Bus entity.
            scope: (String) Requested scope for SAP APIs.
            scopes: (Map of String) Permissions (scopes) included in JWTs.
            secret: (String, Sensitive) Google Firebase Secret. (SDK v2 only).
            secret_encoded: (Boolean) Indicates whether the client secret is Base64-encoded.
            selected_initiators: (Set of String) Contains the list of initiators to be enabled for the given client.
            sentry: '(Block List, Max: 1) Sentry SSO configuration. (see below for nested schema)'
            service_password: (String, Sensitive) Service account password to use to authenticate API calls to the token endpoint.
            session_transfer: '(Block List, Max: 1) (see below for nested schema)'
            sha256_cert_fingerprints: (List of String)
            sharepoint: '(Block List, Max: 1) SharePoint SSO configuration. (see below for nested schema)'
            sign_response: (Boolean) Indicates whether or not the SAML Response should be signed instead of the SAML Assertion.
            signature_algorithm: (String) Algorithm used to sign the SAML Assertion or response. Options include rsa-sha1 and rsa-sha256. Defaults to rsa-sha1.
            signed_identifier: (String) Shared access policy identifier defined in your storage account resource.
            signing_cert: (String) Optionally indicates the public key certificate used to validate SAML requests. If set, SAML requests will be required to be signed. A sample value would be -----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n.
            signing_keys: (List of Map of String, Sensitive) List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.
            slack: '(Block List, Max: 1) Slack team or workspace name usually first segment in your Slack URL, for example https://acme-org.slack.com would be acme-org. (see below for nested schema)'
            slo_enabled: (Boolean) Controls whether Auth0 should notify service providers of session termination.
            springcm: '(Block List, Max: 1) SpringCM SSO configuration. (see below for nested schema)'
            sso: (Boolean) Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).
            sso_disabled: (Boolean) Indicates whether or not SSO is disabled.
            sso_integration: '(Block List, Max: 1) Generic SSO configuration. (see below for nested schema)'
            storage_access_key: (String, Sensitive) Access key associated with this storage account.
            team: (String) Slack team name.
            team_id: (String)
            token_endpoint_url: (String) The OAuth2 token endpoint URL of your SAP OData server.
            token_exchange: '(Block List, Max: 1) Allows configuration for token exchange (see below for nested schema)'
            token_lifetime: (Number) The absolute lifetime of a refresh token in seconds.
            token_quota: '(Block List, Max: 1) The token quota configuration. (see below for nested schema)'
            typed_attributes: (Boolean) Indicates whether or not we should infer the xs:type of the element. Types include xs:string, xs:boolean, xs:double, and xs:anyType. When set to false, all xs:type are xs:anyType. Defaults to true.
            url: (String) Microsoft Dynamics CRM application URL.
            username_attribute: (String) Name of the property in the user object that maps to a SAP username, for example email.
            version: (String) SSO integration version installed.
            wams: '(Block List, Max: 1) Windows Azure Mobile Services addon configuration. (see below for nested schema)'
            web_origins: (List of String) URLs that represent valid web origins for use with web message response mode.
            wsfed: '(Block List, Max: 1) WS-Fed (WIF) addon indicator. Actual configuration is stored in callback and client_aliases properties on the client. (see below for nested schema)'
            zendesk: '(Block List, Max: 1) Zendesk SSO configuration. (see below for nested schema)'
            zoom: '(Block List, Max: 1) Zoom SSO configuration. (see below for nested schema)'
        importStatements:
            - |-
              # This resource can be imported by specifying the client ID.
              #
              # Example:
              terraform import auth0_client.my_client "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
    auth0_client_credentials:
        subCategory: ""
        description: With this resource, you can configure the method to use when making requests to any endpoint that requires this client to authenticate.
        name: auth0_client_credentials
        title: auth0_client_credentials
        examples:
            - name: test
              manifest: |-
                {
                  "authentication_method": "client_secret_post",
                  "client_id": "${auth0_client.my_client.id}"
                }
              references:
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "app_type": "non_interactive",
                      "jwt_configuration": [
                        {
                          "alg": "RS256"
                        }
                      ],
                      "name": "Application - Acceptance Test"
                    }
            - name: test
              manifest: |-
                {
                  "authentication_method": "client_secret_basic",
                  "client_id": "${auth0_client.my_client.id}"
                }
              references:
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "app_type": "non_interactive",
                      "jwt_configuration": [
                        {
                          "alg": "RS256"
                        }
                      ],
                      "name": "Application - Acceptance Test"
                    }
            - name: test
              manifest: |-
                {
                  "authentication_method": "none",
                  "client_id": "${auth0_client.my_client.id}"
                }
              references:
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "app_type": "non_interactive",
                      "jwt_configuration": [
                        {
                          "alg": "RS256"
                        }
                      ],
                      "name": "Application - Acceptance Test"
                    }
            - name: test
              manifest: |-
                {
                  "authentication_method": "private_key_jwt",
                  "client_id": "${auth0_client.my_client.id}",
                  "private_key_jwt": [
                    {
                      "credentials": [
                        {
                          "algorithm": "RS256",
                          "credential_type": "public_key",
                          "name": "Testing Credentials 1",
                          "parse_expiry_from_cert": true,
                          "pem": "-----BEGIN CERTIFICATE-----\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n-----END CERTIFICATE-----\n"
                        }
                      ]
                    }
                  ]
                }
              references:
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "app_type": "non_interactive",
                      "jwt_configuration": [
                        {
                          "alg": "RS256"
                        }
                      ],
                      "name": "Application - Acceptance Test"
                    }
            - name: test
              manifest: |-
                {
                  "authentication_method": "tls_client_auth",
                  "client_id": "${auth0_client.my_client.id}",
                  "tls_client_auth": [
                    {
                      "credentials": [
                        {
                          "credential_type": "cert_subject_dn",
                          "name": "Testing Credentials 1",
                          "pem": "-----BEGIN CERTIFICATE-----\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n-----END CERTIFICATE-----\n"
                        }
                      ]
                    }
                  ]
                }
              references:
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "app_type": "non_interactive",
                      "jwt_configuration": [
                        {
                          "alg": "RS256"
                        }
                      ],
                      "name": "Application - Acceptance Test"
                    }
            - name: test
              manifest: |-
                {
                  "authentication_method": "tls_client_auth",
                  "client_id": "${auth0_client.my_client.id}",
                  "tls_client_auth": [
                    {
                      "credentials": [
                        {
                          "credential_type": "cert_subject_dn",
                          "name": "Testing Credentials 1",
                          "subject_dn": "C=es\nST=Madrid\nL=Madrid\nO=Okta\nOU=DX-CDT\nCN=Developer Experience"
                        }
                      ]
                    }
                  ]
                }
              references:
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "app_type": "non_interactive",
                      "jwt_configuration": [
                        {
                          "alg": "RS256"
                        }
                      ],
                      "name": "Application - Acceptance Test"
                    }
            - name: test
              manifest: |-
                {
                  "authentication_method": "self_signed_tls_client_auth",
                  "client_id": "${auth0_client.my_client.id}",
                  "self_signed_tls_client_auth": [
                    {
                      "credentials": [
                        {
                          "credential_type": "x509_cert",
                          "name": "Testing Credentials 1",
                          "pem": "-----BEGIN CERTIFICATE-----\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n-----END CERTIFICATE-----\n"
                        }
                      ]
                    }
                  ]
                }
              references:
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "app_type": "non_interactive",
                      "jwt_configuration": [
                        {
                          "alg": "RS256"
                        }
                      ],
                      "name": "Application - Acceptance Test"
                    }
            - name: test
              manifest: |-
                {
                  "authentication_method": "client_secret_basic",
                  "client_id": "${auth0_client.my_client.id}",
                  "client_secret": "LUFqPx+sRLjbL7peYRPFmFu-bbvE7u7og4YUNe_C345=683341"
                }
              references:
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "app_type": "non_interactive",
                      "jwt_configuration": [
                        {
                          "alg": "RS256"
                        }
                      ],
                      "name": "Application - Acceptance Test"
                    }
        argumentDocs:
            algorithm: (String) Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used.
            authentication_method: (String) Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include none (public client without a client secret), client_secret_post (confidential client using HTTP POST parameters), client_secret_basic (confidential client using HTTP Basic), private_key_jwt (confidential client using a Private Key JWT), tls_client_auth (confidential client using CA-based mTLS authentication), self_signed_tls_client_auth (confidential client using mTLS authentication utilizing a self-signed certificate).
            client_id: (String) The ID of the client for which to configure the authentication method.
            client_secret: (String, Sensitive) Secret for the client when using client_secret_post or client_secret_basic authentication method. Keep this private. To access this attribute you need to add the read:client_keys scope to the Terraform client. Otherwise, the attribute will contain an empty string. The attribute will also be an empty string in case private_key_jwt is selected as an authentication method.
            created_at: (String) The ISO 8601 formatted date the credential was created.
            credential_type: '(String) Credential type. Supported types: public_key.'
            credentials: '(Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)'
            expires_at: (String) The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
            id: (String) The ID of this resource.
            key_id: (String) The key identifier of the credential, generated on creation.
            name: (String) Friendly name for a credential.
            parse_expiry_from_cert: (Boolean) Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the expires_at is set the credential expiry will be set to the explicit expires_at value.
            pem: (String) PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
            private_key_jwt: '(Block List, Max: 1) Defines private_key_jwt client authentication method. (see below for nested schema)'
            required: (Boolean) Require JWT-secured authorization requests.
            self_signed_tls_client_auth: '(Block List, Max: 1) Defines tls_client_auth client authentication method. (see below for nested schema)'
            signed_request_object: '(Block List, Max: 1) Configuration for JWT-secured Authorization Requests(JAR). (see below for nested schema)'
            subject_dn: (String) Subject Distinguished Name. Mutually exlusive with pem property.
            thumbprint_sha256: (String) The X509 certificate's SHA256 thumbprint.
            tls_client_auth: '(Block List, Max: 1) Defines tls_client_auth client authentication method. (see below for nested schema)'
            updated_at: (String) The ISO 8601 formatted date the credential was updated.
        importStatements:
            - |-
              # This resource can be imported by specifying the client ID.
              #
              # Example:
              terraform import auth0_client_credentials.my_creds "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
    auth0_client_grant:
        subCategory: ""
        description: Auth0 uses various grant types, or methods by which you grant limited access to your resources to another entity without exposing credentials. The OAuth 2.0 protocol supports several types of grants, which allow different types of access. This resource allows you to create and manage client grants used with configured Auth0 clients.
        name: auth0_client_grant
        title: auth0_client_grant
        examples:
            - name: my_client_grant
              manifest: |-
                {
                  "audience": "${auth0_resource_server.my_resource_server.identifier}",
                  "client_id": "${auth0_client.my_client.id}",
                  "scopes": [
                    "create:foo",
                    "create:bar"
                  ]
                }
              references:
                audience: auth0_resource_server.my_resource_server.identifier
                client_id: auth0_client.my_client.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "name": "Example Application - Client Grant (Managed by Terraform)"
                    }
                auth0_resource_server.my_resource_server: |-
                    {
                      "identifier": "https://api.example.com/client-grant",
                      "name": "Example Resource Server - Client Grant (Managed by Terraform)",
                      "scopes": [
                        {
                          "description": "Create foos",
                          "value": "create:foo"
                        },
                        {
                          "description": "Create bars",
                          "value": "create:bar"
                        }
                      ]
                    }
        argumentDocs:
            allow_any_organization: (Boolean) If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
            audience: (String) Audience or API Identifier for this grant.
            client_id: (String) ID of the client for this grant.
            id: (String) The ID of this resource.
            organization_usage: (String) Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
            scopes: (List of String) Permissions (scopes) included in this grant.
        importStatements:
            - |-
              # This resource can be imported by specifying the client grant ID.
              # You can find this within the Management Dashboard in Application -> APIs -> Expand the required API.
              #
              # Example:
              terraform import auth0_client_grant.my_client_grant "cgr_XXXXXXXXXXXXXXXX"
    auth0_connection:
        subCategory: ""
        description: With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure and manage connections to be used with your clients and users.
        name: auth0_connection
        title: auth0_connection
        examples:
            - name: my_connection
              manifest: |-
                {
                  "is_domain_connection": true,
                  "metadata": {
                    "key1": "foo",
                    "key2": "bar"
                  },
                  "name": "Example-Connection",
                  "options": [
                    {
                      "authentication_methods": [
                        {
                          "passkey": [
                            {
                              "enabled": true
                            }
                          ],
                          "password": [
                            {
                              "enabled": true
                            }
                          ]
                        }
                      ],
                      "brute_force_protection": true,
                      "configuration": {
                        "bar": "baz",
                        "foo": "bar"
                      },
                      "custom_scripts": {
                        "get_user": "        function getByEmail(email, callback) {\n          return callback(new Error(\"Whoops!\"));\n        }\n"
                      },
                      "disable_signup": false,
                      "enabled_database_customization": true,
                      "import_mode": false,
                      "mfa": [
                        {
                          "active": true,
                          "return_enroll_settings": true
                        }
                      ],
                      "passkey_options": [
                        {
                          "challenge_ui": "both",
                          "local_enrollment_enabled": true,
                          "progressive_enrollment_enabled": true
                        }
                      ],
                      "password_complexity_options": [
                        {
                          "min_length": 12
                        }
                      ],
                      "password_dictionary": [
                        {
                          "dictionary": [
                            "password",
                            "admin",
                            "1234"
                          ],
                          "enable": true
                        }
                      ],
                      "password_history": [
                        {
                          "enable": true,
                          "size": 3
                        }
                      ],
                      "password_no_personal_info": [
                        {
                          "enable": true
                        }
                      ],
                      "password_policy": "excellent",
                      "requires_username": true,
                      "strategy_version": 2,
                      "upstream_params": "${jsonencode({\n      \"screen_name\" : {\n        \"alias\" : \"login_hint\"\n      }\n    })}",
                      "validation": [
                        {
                          "username": [
                            {
                              "max": 40,
                              "min": 10
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "strategy": "auth0"
                }
            - name: google_oauth2
              manifest: |-
                {
                  "name": "Google-OAuth2-Connection",
                  "options": [
                    {
                      "allowed_audiences": [
                        "example.com",
                        "api.example.com"
                      ],
                      "client_id": "\u003cclient-id\u003e",
                      "client_secret": "\u003cclient-secret\u003e",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "email",
                        "profile",
                        "gmail",
                        "youtube"
                      ],
                      "set_user_root_attributes": "on_each_login"
                    }
                  ],
                  "strategy": "google-oauth2"
                }
            - name: google_apps
              manifest: |-
                {
                  "is_domain_connection": false,
                  "name": "connection-google-apps",
                  "options": [
                    {
                      "api_enable_users": true,
                      "client_id": "",
                      "client_secret": "",
                      "domain": "example.com",
                      "domain_aliases": [
                        "example.com",
                        "api.example.com"
                      ],
                      "icon_url": "https://example.com/assets/logo.png",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "ext_profile",
                        "ext_groups"
                      ],
                      "set_user_root_attributes": "on_each_login",
                      "tenant_domain": "example.com",
                      "upstream_params": "${jsonencode({\n      \"screen_name\" : {\n        \"alias\" : \"login_hint\"\n      }\n    })}"
                    }
                  ],
                  "show_as_button": false,
                  "strategy": "google-apps"
                }
            - name: facebook
              manifest: |-
                {
                  "name": "Facebook-Connection",
                  "options": [
                    {
                      "client_id": "\u003cclient-id\u003e",
                      "client_secret": "\u003cclient-secret\u003e",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "public_profile",
                        "email",
                        "groups_access_member_info",
                        "user_birthday"
                      ],
                      "set_user_root_attributes": "on_each_login"
                    }
                  ],
                  "strategy": "facebook"
                }
            - name: apple
              manifest: |-
                {
                  "name": "Apple-Connection",
                  "options": [
                    {
                      "client_id": "\u003cclient-id\u003e",
                      "client_secret": "-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----",
                      "key_id": "\u003ckey-id\u003e",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "email",
                        "name"
                      ],
                      "set_user_root_attributes": "on_first_login",
                      "team_id": "\u003cteam-id\u003e"
                    }
                  ],
                  "strategy": "apple"
                }
            - name: linkedin
              manifest: |-
                {
                  "name": "Linkedin-Connection",
                  "options": [
                    {
                      "client_id": "\u003cclient-id\u003e",
                      "client_secret": "\u003cclient-secret\u003e",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "basic_profile",
                        "profile",
                        "email"
                      ],
                      "set_user_root_attributes": "on_each_login",
                      "strategy_version": 2
                    }
                  ],
                  "strategy": "linkedin"
                }
            - name: github
              manifest: |-
                {
                  "name": "GitHub-Connection",
                  "options": [
                    {
                      "client_id": "\u003cclient-id\u003e",
                      "client_secret": "\u003cclient-secret\u003e",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "email",
                        "profile",
                        "public_repo",
                        "repo"
                      ],
                      "set_user_root_attributes": "on_each_login"
                    }
                  ],
                  "strategy": "github"
                }
            - name: salesforce
              manifest: |-
                {
                  "name": "Salesforce-Connection",
                  "options": [
                    {
                      "client_id": "\u003cclient-id\u003e",
                      "client_secret": "\u003cclient-secret\u003e",
                      "community_base_url": "https://salesforce.example.com",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "openid",
                        "email"
                      ],
                      "set_user_root_attributes": "on_first_login"
                    }
                  ],
                  "strategy": "salesforce"
                }
            - name: oauth2
              manifest: |-
                {
                  "name": "OAuth2-Connection",
                  "options": [
                    {
                      "authorization_endpoint": "https://auth.example.com/oauth2/authorize",
                      "client_id": "\u003cclient-id\u003e",
                      "client_secret": "\u003cclient-secret\u003e",
                      "custom_headers": [
                        {
                          "header": "bar",
                          "value": "foo"
                        },
                        {
                          "header": "foo",
                          "value": "bar"
                        }
                      ],
                      "icon_url": "https://auth.example.com/assets/logo.png",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "pkce_enabled": true,
                      "scopes": [
                        "basic_profile",
                        "profile",
                        "email"
                      ],
                      "scripts": {
                        "fetchUserProfile": "        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"Whoops!\"));\n        }\n"
                      },
                      "set_user_root_attributes": "on_each_login",
                      "strategy_version": 2,
                      "token_endpoint": "https://auth.example.com/oauth2/token"
                    }
                  ],
                  "strategy": "oauth2"
                }
            - name: ad
              manifest: |-
                {
                  "display_name": "Active Directory Connection",
                  "name": "connection-active-directory",
                  "options": [
                    {
                      "brute_force_protection": true,
                      "disable_cache": false,
                      "disable_self_service_change_password": true,
                      "domain_aliases": [
                        "example.com",
                        "api.example.com"
                      ],
                      "icon_url": "https://example.com/assets/logo.png",
                      "ips": [
                        "192.168.1.1",
                        "192.168.1.2"
                      ],
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "set_user_root_attributes": "on_each_login",
                      "strategy_version": 2,
                      "tenant_domain": "example.com",
                      "upstream_params": "${jsonencode({\n      \"screen_name\" : {\n        \"alias\" : \"login_hint\"\n      }\n    })}",
                      "use_cert_auth": false,
                      "use_kerberos": false
                    }
                  ],
                  "show_as_button": true,
                  "strategy": "ad"
                }
            - name: azure_ad
              manifest: |-
                {
                  "name": "connection-azure-ad",
                  "options": [
                    {
                      "api_enable_users": true,
                      "app_id": "app-id-123",
                      "client_id": "123456",
                      "client_secret": "123456",
                      "domain": "example.onmicrosoft.com",
                      "domain_aliases": [
                        "example.com",
                        "api.example.com"
                      ],
                      "icon_url": "https://example.onmicrosoft.com/assets/logo.png",
                      "identity_api": "azure-active-directory-v1.0",
                      "max_groups_to_retrieve": 250,
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "basic_profile",
                        "ext_groups",
                        "ext_profile"
                      ],
                      "set_user_root_attributes": "on_each_login",
                      "should_trust_email_verified_connection": "never_set_emails_as_verified",
                      "strategy_version": 2,
                      "tenant_domain": "example.onmicrosoft.com",
                      "upstream_params": "${jsonencode({\n      \"screen_name\" : {\n        \"alias\" : \"login_hint\"\n      }\n    })}",
                      "use_wsfed": false,
                      "user_id_attribute": "oid",
                      "waad_common_endpoint": false,
                      "waad_protocol": "openid-connect"
                    }
                  ],
                  "show_as_button": true,
                  "strategy": "waad"
                }
            - name: sms
              manifest: |-
                {
                  "name": "SMS-Connection",
                  "options": [
                    {
                      "brute_force_protection": true,
                      "disable_signup": false,
                      "forward_request_info": true,
                      "from": "\u003cphone-number\u003e",
                      "gateway_authentication": [
                        {
                          "audience": "https://somewhere.com/sms-gateway",
                          "method": "bearer",
                          "secret": "4e2680bb72ec2ae24836476dd37ed6c2",
                          "secret_base64_encoded": false,
                          "subject": "test.us.auth0.com:sms"
                        }
                      ],
                      "gateway_url": "https://somewhere.com/sms-gateway",
                      "messaging_service_sid": "\u003cmessaging-service-sid\u003e",
                      "name": "SMS OTP",
                      "provider": "sms_gateway",
                      "syntax": "md_with_macros",
                      "template": "Your one-time password is @@password@@",
                      "totp": [
                        {
                          "length": 6,
                          "time_step": 300
                        }
                      ],
                      "twilio_sid": "\u003ctwilio-sid\u003e",
                      "twilio_token": "\u003ctwilio-token\u003e"
                    }
                  ],
                  "strategy": "sms"
                }
            - name: sms
              manifest: |-
                {
                  "is_domain_connection": false,
                  "name": "custom-sms-gateway",
                  "options": [
                    {
                      "brute_force_protection": true,
                      "disable_signup": false,
                      "forward_request_info": true,
                      "from": "+15555555555",
                      "gateway_authentication": [
                        {
                          "audience": "https://somewhere.com/sms-gateway",
                          "method": "bearer",
                          "secret": "4e2680bb74ec2ae24736476dd37ed6c2",
                          "secret_base64_encoded": false,
                          "subject": "test.us.auth0.com:sms"
                        }
                      ],
                      "gateway_url": "https://somewhere.com/sms-gateway",
                      "name": "sms",
                      "provider": "sms_gateway",
                      "syntax": "md_with_macros",
                      "template": "@@password@@",
                      "totp": [
                        {
                          "length": 6,
                          "time_step": 300
                        }
                      ]
                    }
                  ],
                  "strategy": "sms"
                }
            - name: passwordless_email
              manifest: |-
                {
                  "name": "email",
                  "options": [
                    {
                      "auth_params": {
                        "response_type": "code",
                        "scope": "openid email profile offline_access"
                      },
                      "brute_force_protection": true,
                      "disable_signup": false,
                      "from": "{{ application.name }} \u003croot@auth0.com\u003e",
                      "name": "email",
                      "non_persistent_attrs": [],
                      "set_user_root_attributes": "on_each_login",
                      "subject": "Welcome to {{ application.name }}",
                      "syntax": "liquid",
                      "template": "\u003chtml\u003eThis is the body of the email\u003c/html\u003e",
                      "totp": [
                        {
                          "length": 6,
                          "time_step": 300
                        }
                      ]
                    }
                  ],
                  "strategy": "email"
                }
            - name: samlp
              manifest: |-
                {
                  "name": "SAML-Connection",
                  "options": [
                    {
                      "debug": false,
                      "decryption_key": [
                        {
                          "cert": "-----BEGIN CERTIFICATE-----\n...{your public key cert here}...\n-----END CERTIFICATE-----",
                          "key": "-----BEGIN PRIVATE KEY-----\n...{your private key here}...\n-----END PRIVATE KEY-----"
                        }
                      ],
                      "digest_algorithm": "sha256",
                      "disable_sign_out": true,
                      "domain_aliases": [
                        "example.com",
                        "alias.example.com"
                      ],
                      "entity_id": "\u003centity_id\u003e",
                      "fields_map": "${jsonencode({\n      \"name\" : [\"name\", \"nameidentifier\"]\n      \"email\" : [\"emailaddress\", \"nameidentifier\"]\n      \"family_name\" : \"surname\"\n    })}",
                      "global_token_revocation_jwt_iss": "issuer.example.com",
                      "global_token_revocation_jwt_sub": "user123",
                      "icon_url": "https://saml.provider/assets/logo.png",
                      "idp_initiated": [
                        {
                          "client_authorize_query": "type=code\u0026timeout=30",
                          "client_id": "client_id",
                          "client_protocol": "samlp"
                        }
                      ],
                      "metadata_url": "https://saml.provider/imi/ns/FederationMetadata.xml",
                      "metadata_xml": "    \u003c?xml version=\"1.0\"?\u003e\n    \u003cmd:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" entityID=\"https://example.com\"\u003e\n      \u003cmd:IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\"\u003e\n        \u003cmd:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://saml.provider/sign_out\"/\u003e\n        \u003cmd:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://saml.provider/sign_in\"/\u003e\n      \u003c/md:IDPSSODescriptor\u003e\n    \u003c/md:EntityDescriptor\u003e\n",
                      "protocol_binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                      "request_template": "\u003csamlp:AuthnRequest xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n@@AssertServiceURLAndDestination@@\n    ID=\"@@ID@@\"\n    IssueInstant=\"@@IssueInstant@@\"\n    ProtocolBinding=\"@@ProtocolBinding@@\" Version=\"2.0\"\u003e\n    \u003csaml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\u003e@@Issuer@@\u003c/saml:Issuer\u003e\n\u003c/samlp:AuthnRequest\u003e",
                      "sign_in_endpoint": "https://saml.provider/sign_in",
                      "sign_out_endpoint": "https://saml.provider/sign_out",
                      "signature_algorithm": "rsa-sha256",
                      "signing_cert": "\u003csigning-certificate\u003e",
                      "signing_key": [
                        {
                          "cert": "-----BEGIN CERTIFICATE-----\n...{your public key cert here}...\n-----END CERTIFICATE-----",
                          "key": "-----BEGIN PRIVATE KEY-----\n...{your private key here}...\n-----END PRIVATE KEY-----"
                        }
                      ],
                      "strategy_version": 2,
                      "tenant_domain": "example.com",
                      "user_id_attribute": "https://saml.provider/imi/ns/identity-200810"
                    }
                  ],
                  "strategy": "samlp"
                }
            - name: windowslive
              manifest: |-
                {
                  "name": "Windowslive-Connection",
                  "options": [
                    {
                      "client_id": "\u003cclient-id\u003e",
                      "client_secret": "\u003cclient-secret\u003e",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "signin",
                        "graph_user"
                      ],
                      "set_user_root_attributes": "on_first_login",
                      "strategy_version": 2
                    }
                  ],
                  "strategy": "windowslive"
                }
            - name: oidc
              manifest: |-
                {
                  "display_name": "OIDC Connection",
                  "name": "oidc-connection",
                  "options": [
                    {
                      "attribute_map": [
                        {
                          "attributes": "${jsonencode({\n        \"name\" : \"$${context.tokenset.name}\",\n        \"email\" : \"$${context.tokenset.email}\",\n        \"email_verified\" : \"$${context.tokenset.email_verified}\",\n        \"nickname\" : \"$${context.tokenset.nickname}\",\n        \"picture\" : \"$${context.tokenset.picture}\",\n        \"given_name\" : \"$${context.tokenset.given_name}\",\n        \"family_name\" : \"$${context.tokenset.family_name}\"\n      })}",
                          "mapping_mode": "use_map",
                          "userinfo_scope": "openid email profile groups"
                        }
                      ],
                      "authorization_endpoint": "https://www.paypal.com/signin/authorize",
                      "client_id": "1234567",
                      "client_secret": "1234567",
                      "connection_settings": [
                        {
                          "pkce": "auto"
                        }
                      ],
                      "discovery_url": "https://www.paypalobjects.com/.well-known/openid-configuration",
                      "domain_aliases": [
                        "example.com"
                      ],
                      "icon_url": "https://example.com/assets/logo.png",
                      "issuer": "https://www.paypalobjects.com",
                      "jwks_uri": "https://api.paypal.com/v1/oauth2/certs",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "openid",
                        "email"
                      ],
                      "set_user_root_attributes": "on_first_login",
                      "tenant_domain": "",
                      "token_endpoint": "https://api.paypal.com/v1/oauth2/token",
                      "type": "back_channel",
                      "userinfo_endpoint": "https://api.paypal.com/v1/oauth2/token/userinfo"
                    }
                  ],
                  "show_as_button": false,
                  "strategy": "oidc"
                }
            - name: okta
              manifest: |-
                {
                  "display_name": "Okta Workforce Connection",
                  "name": "okta-connection",
                  "options": [
                    {
                      "attribute_map": [
                        {
                          "attributes": "${jsonencode({\n        \"name\" : \"$${context.tokenset.name}\",\n        \"email\" : \"$${context.tokenset.email}\",\n        \"email_verified\" : \"$${context.tokenset.email_verified}\",\n        \"nickname\" : \"$${context.tokenset.nickname}\",\n        \"picture\" : \"$${context.tokenset.picture}\",\n        \"given_name\" : \"$${context.tokenset.given_name}\",\n        \"family_name\" : \"$${context.tokenset.family_name}\"\n      })}",
                          "mapping_mode": "basic_profile",
                          "userinfo_scope": "openid email profile groups"
                        }
                      ],
                      "authorization_endpoint": "https://example.okta.com/oauth2/v1/authorize",
                      "client_id": "1234567",
                      "client_secret": "1234567",
                      "connection_settings": [
                        {
                          "pkce": "auto"
                        }
                      ],
                      "domain": "example.okta.com",
                      "domain_aliases": [
                        "example.com"
                      ],
                      "issuer": "https://example.okta.com",
                      "jwks_uri": "https://example.okta.com/oauth2/v1/keys",
                      "non_persistent_attrs": [
                        "ethnicity",
                        "gender"
                      ],
                      "scopes": [
                        "openid",
                        "profile",
                        "email"
                      ],
                      "set_user_root_attributes": "on_first_login",
                      "token_endpoint": "https://example.okta.com/oauth2/v1/token",
                      "upstream_params": "${jsonencode({\n      \"screen_name\" : {\n        \"alias\" : \"login_hint\"\n      }\n    })}",
                      "userinfo_endpoint": "https://example.okta.com/oauth2/v1/userinfo"
                    }
                  ],
                  "show_as_button": false,
                  "strategy": "okta"
                }
        argumentDocs:
            active: (Boolean) Defines whether email attribute is active as an identifier
            adfs_server: (String) ADFS URL where to fetch the metadata source.
            allowed_audiences: (Set of String) List of allowed audiences.
            allowed_types: (Block List) Defines allowed types for for UserName attribute (see below for nested schema)
            api_enable_users: (Boolean) Enable API Access to users.
            app_id: (String) App ID.
            attribute_map: '(Block List, Max: 1) OpenID Connect and Okta Workforce connections can automatically map claims received from the identity provider (IdP). You can configure this mapping through a library template provided by Auth0 or by entering your own template directly. Click here for more info. (see below for nested schema)'
            attributes: '(Block List) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order (see below for nested schema)'
            audience: (String) Audience claim for the HS256 token sent to gateway_url.
            auth_params: (Map of String) Query string parameters to be included as part of the generated passwordless email link.
            authentication_methods: (Block List) Specifies the authentication methods and their configuration (enabled or disabled) (see below for nested schema)
            authorization_endpoint: (String) Authorization endpoint.
            brute_force_protection: (Boolean) Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
            cert: (String)
            challenge_ui: (String) Controls the UI used to challenge the user for their passkey
            client_authorize_query: (String)
            client_id: (String) The strategy's client ID.
            client_protocol: (String)
            client_secret: (String, Sensitive) The strategy's client secret.
            community_base_url: (String) Salesforce community base URL.
            configuration: (Map of String, Sensitive) A case-sensitive map of key value pairs used as configuration variables for the custom_script.
            connection_settings: '(Block List, Max: 1) Proof Key for Code Exchange (PKCE) configuration settings for an OIDC or Okta Workforce connection. (see below for nested schema)'
            custom_headers: (Block Set) Configure extra headers to the Token endpoint of an OAuth 2.0 provider (see below for nested schema)
            custom_scripts: (Map of String) A map of scripts used to integrate with a custom database.
            debug: (Boolean) When enabled, additional debug information will be generated.
            decryption_key: '(Block List, Max: 1) The key used to decrypt encrypted responses from the connection. Uses the key and cert properties to provide the private key and certificate respectively. (see below for nested schema)'
            dictionary: (Set of String) Customized contents of the password dictionary. By default, the password dictionary contains a list of the 10,000 most common passwords; your customized content is used in addition to the default password dictionary. Matching is not case-sensitive.
            digest_algorithm: (String) Sign Request Algorithm Digest.
            disable_cache: (Boolean) Indicates whether to disable the cache or not.
            disable_self_service_change_password: (Boolean) Indicates whether to remove the forgot password link within the New Universal Login.
            disable_sign_out: (Boolean) When enabled, will disable sign out.
            disable_signup: (Boolean) Indicates whether to allow user sign-ups to your application.
            discovery_url: (String) OpenID discovery URL, e.g. https://auth.example.com/.well-known/openid-configuration.
            display_name: (String) Name used in login screen.
            domain: (String) Domain name.
            domain_aliases: (Set of String) List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
            email: (Block List) Connection Options for Email Attribute (see below for nested schema)
            enable: (Boolean) Indicates whether the password dictionary check is enabled for this connection.
            enable_script_context: '(Boolean) Set to true to inject context into custom DB scripts (warning: cannot be disabled once enabled).'
            enabled: (Boolean) Enables passkey authentication
            enabled_database_customization: (Boolean) Set to true to use a legacy user store.
            entity_id: (String) Custom Entity ID for the connection.
            fed_metadata_xml: (String) Federation Metadata for the ADFS connection.
            fields_map: (String) If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
            forward_request_info: (Boolean) Specifies whether or not request info should be forwarded to sms gateway.
            from: (String) Address to use as the sender.
            gateway_authentication: '(Block List, Max: 1) Defines the parameters used to generate the auth token for the custom gateway. (see below for nested schema)'
            gateway_url: (String) Defines a custom sms gateway to use instead of Twilio.
            global_token_revocation_jwt_iss: (String) Specifies the issuer of the JWT used for global token revocation for the SAML connection.
            global_token_revocation_jwt_sub: (String) Specifies the subject of the JWT used for global token revocation for the SAML connection.
            header: (String)
            icon_url: (String) Icon URL.
            id: (String) The ID of this resource.
            identifier: (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
            identity_api: '(String) Azure AD Identity API. Available options are: microsoft-identity-platform-v2.0 or azure-active-directory-v1.0.'
            idp_initiated: '(Block List, Max: 1) Configuration options for IDP Initiated Authentication. This is an object with the properties: client_id, client_protocol, and client_authorize_query. (see below for nested schema)'
            import_mode: (Boolean) Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
            ips: (Set of String) A list of IPs.
            is_domain_connection: (Boolean) Indicates whether the connection is domain level.
            issuer: (String) Issuer URL, e.g. https://auth.example.com.
            jwks_uri: (String) JWKS URI.
            key: (String)
            key_id: (String) Apple Key ID.
            length: (Number) Length of the one-time password.
            local_enrollment_enabled: (Boolean) Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
            map_user_id_to_id: (Boolean) By default Auth0 maps user_id to email. Enabling this setting changes the behavior to map user_id to 'id' instead. This can only be defined on a new Google Workspace connection and can not be changed once set.
            mapping_mode: '(String) Method used to map incoming claims. Possible values: use_map (Okta or OIDC), bind_all (OIDC) or basic_profile (Okta).'
            max: (Number)
            max_groups_to_retrieve: (String) Maximum number of groups to retrieve.
            max_length: (Number) Defines Max Length for User Name attribute
            messaging_service_sid: (String) SID for Copilot. Used when SMS Source is Copilot.
            metadata: (Map of String) Metadata associated with the connection, in the form of a map of string values (max 255 chars).
            metadata_url: (String) The URL of the SAML metadata document.
            metadata_xml: (String) The XML content for the SAML metadata document. Values within the xml will take precedence over other attributes set on the options block.
            method: (String) Authentication method (default is bearer token).
            mfa: '(Block List, Max: 1) Configuration options for multifactor authentication. (see below for nested schema)'
            min: (Number)
            min_length: (Number) Defines Min Length for User Name attribute
            name: (String) Name of the connection.
            non_persistent_attrs: (Set of String) If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
            options: '(Block List, Max: 1) Configuration settings for connection options. (see below for nested schema)'
            passkey: '(Block List, Max: 1) Configures passkey authentication (see below for nested schema)'
            passkey_options: '(Block List, Max: 1) Defines options for the passkey authentication method (see below for nested schema)'
            password: '(Block List, Max: 1) Configures password authentication (see below for nested schema)'
            password_complexity_options: '(Block List, Max: 1) Configuration settings for password complexity. (see below for nested schema)'
            password_dictionary: '(Block List, Max: 1) Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. (see below for nested schema)'
            password_history: (Block List) Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. (see below for nested schema)
            password_no_personal_info: '(Block List, Max: 1) Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user''s personal data, including user''s name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user''s email, or first part of the user''s email. (see below for nested schema)'
            password_policy: (String) Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include none, low, fair, good, excellent.
            phone_number: (Block List) Connection Options for Phone Number Attribute (see below for nested schema)
            ping_federate_base_url: (String) Ping Federate Server URL.
            pkce: '(String) PKCE configuration. Possible values: auto (uses the strongest algorithm available), S256 (uses the SHA-256 algorithm), plain (uses plaintext as described in the PKCE specification) or disabled (disables support for PKCE).'
            pkce_enabled: (Boolean) Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
            precedence: '(List of String) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order'
            profile_required: (Boolean) Defines whether Profile is required
            progressive_enrollment_enabled: (Boolean) Enables or disables progressive enrollment of passkeys for the connection
            protocol_binding: '(String) The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.'
            provider: (String) Defines the custom sms_gateway provider.
            realm_fallback: (Boolean) Allows configuration if connections_realm_fallback flag is enabled for the tenant
            realms: (List of String) Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
            request_template: (String) Template that formats the SAML request.
            requires_username: (Boolean) Indicates whether the user is required to provide a username in addition to an email address.
            return_enroll_settings: (Boolean) Indicates whether multifactor authentication enrollment settings will be returned.
            scopes: '(Set of String) Permissions to grant to the connection. Within the Auth0 dashboard these appear under the "Attributes" and "Extended Attributes" sections. Some examples: basic_profile, ext_profile, ext_nested_groups, etc.'
            scripts: (Map of String) A map of scripts used for an OAuth connection. Only accepts a fetchUserProfile script.
            secret: (String, Sensitive) Secret used to sign the HS256 token sent to gateway_url.
            secret_base64_encoded: (Boolean) Specifies whether or not the secret is Base64-encoded.
            set_user_root_attributes: '(String) Determines whether to sync user profile attributes (name, given_name, family_name, nickname, picture) at each login or only on the first login. Options include: on_each_login, on_first_login, never_on_login. Default value: on_each_login.'
            should_trust_email_verified_connection: (String) Choose how Auth0 sets the email_verified field in the user profile.
            show_as_button: (Boolean) Display connection as a button. Only available on enterprise connections.
            sign_in_endpoint: (String) SAML single login URL for the connection.
            sign_out_endpoint: (String) SAML single logout URL for the connection.
            sign_saml_request: (Boolean) When enabled, the SAML authentication request will be signed.
            signature_algorithm: (String) Sign Request Algorithm.
            signing_cert: (String) X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.
            signing_key: '(Block List, Max: 1) The key used to sign requests in the connection. Uses the key and cert properties to provide the private key and certificate respectively. (see below for nested schema)'
            signup: (Block List) Defines signup settings for Email attribute (see below for nested schema)
            size: (Number)
            status: (String) Defines signup status for Email Attribute
            strategy: (String) Type of the connection, which indicates the identity provider.
            strategy_version: (Number) Version 1 is deprecated, use version 2.
            subject: (String) Subject line of the email.
            syntax: (String) Syntax of the template body.
            team_id: (String) Apple Team ID.
            template: (String) Body of the template.
            tenant_domain: (String) Tenant domain name.
            time_step: (Number) Seconds between allowed generation of new passwords.
            token_endpoint: (String) Token endpoint.
            token_endpoint_auth_method: (String) Specifies the authentication method for the token endpoint. (Okta/OIDC Connections)
            token_endpoint_auth_signing_alg: (String) Specifies the signing algorithm for the token endpoint. (Okta/OIDC Connections)
            totp: '(Block List, Max: 1) Configuration options for one-time passwords. (see below for nested schema)'
            twilio_sid: (String) SID for your Twilio account.
            twilio_token: (String, Sensitive) AuthToken for your Twilio account.
            type: (String) Value can be back_channel or front_channel. Front Channel will use OIDC protocol with response_mode=form_post and response_type=id_token. Back Channel will use response_type=code.
            upstream_params: (String) You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
            use_cert_auth: (Boolean) Indicates whether to use cert auth or not.
            use_kerberos: (Boolean) Indicates whether to use Kerberos or not.
            use_wsfed: (Boolean) Whether to use WS-Fed.
            user_id_attribute: (String) Attribute in the token that will be mapped to the user_id property in Auth0.
            userinfo_endpoint: (String) User info endpoint.
            userinfo_scope: (String) This property defines the scopes that Auth0 sends to the IdP’s UserInfo endpoint when requested.
            username: (Block List) Connection Options for User Name Attribute (see below for nested schema)
            validation: '(Block List, Max: 1) Validation of the minimum and maximum values allowed for a user to have as username. (see below for nested schema)'
            value: (String)
            verification: (Block List) Defines settings for Verification under Email attribute (see below for nested schema)
            verification_method: (String) Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
            waad_common_endpoint: (Boolean) Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
            waad_protocol: (String) Protocol to use.
        importStatements:
            - |-
              # This resource can be imported by specifying the connection ID.
              #
              # Example:
              terraform import auth0_connection.google "con_a17f21fdb24d48a0"
    auth0_connection_client:
        subCategory: ""
        description: With this resource, you can enable a single client on a connection.
        name: auth0_connection_client
        title: auth0_connection_client
        examples:
            - name: my_conn_client_assoc
              manifest: |-
                {
                  "client_id": "${auth0_client.my_client.id}",
                  "connection_id": "${auth0_connection.my_conn.id}"
                }
              references:
                client_id: auth0_client.my_client.id
                connection_id: auth0_connection.my_conn.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "name": "My-Auth0-Client"
                    }
                auth0_connection.my_conn: |-
                    {
                      "name": "My-Auth0-Connection",
                      "strategy": "auth0"
                    }
        argumentDocs:
            client_id: (String) ID of the client for which the connection is enabled.
            connection_id: (String) ID of the connection on which to enable the client.
            id: (String) The ID of this resource.
            name: (String) The name of the connection on which to enable the client.
            strategy: (String) The strategy of the connection on which to enable the client.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # connection ID and client ID separated by "::" (note the double colon)
              # <connectionID>::<clientID>
              #
              # Example:
              terraform import auth0_connection_client.my_conn_client_assoc "con_XXXXX::XXXXXXXX"
    auth0_connection_clients:
        subCategory: ""
        description: With this resource, you can manage all of the enabled clients on a connection.
        name: auth0_connection_clients
        title: auth0_connection_clients
        examples:
            - name: my_conn_clients_assoc
              manifest: |-
                {
                  "connection_id": "${auth0_connection.my_conn.id}",
                  "enabled_clients": [
                    "${auth0_client.my_first_client.id}",
                    "${auth0_client.my_second_client.id}"
                  ]
                }
              references:
                connection_id: auth0_connection.my_conn.id
              dependencies:
                auth0_client.my_first_client: |-
                    {
                      "name": "My-First-Auth0-Client"
                    }
                auth0_client.my_second_client: |-
                    {
                      "name": "My-Second-Auth0-Client"
                    }
                auth0_connection.my_conn: |-
                    {
                      "name": "My-Auth0-Connection",
                      "strategy": "auth0"
                    }
        argumentDocs:
            connection_id: (String) ID of the connection on which to enable the client.
            enabled_clients: (Set of String) IDs of the clients for which the connection is enabled.
            id: (String) The ID of this resource.
            name: (String) The name of the connection on which to enable the client.
            strategy: (String) The strategy of the connection on which to enable the client.
        importStatements:
            - |-
              # This resource can be imported by specifying the Connection ID.
              #
              # Example:
              terraform import auth0_connection_clients.my_conn_clients_assoc "con_XXXXX"
    auth0_connection_keys:
        subCategory: ""
        description: Client Assertion JWT is a more secure alternative to client secret authentication for OIDC and Okta Workforce connections. It uses a signed JWT instead of a shared secret to authenticate the client. The resource only supports key rotation. Use the auth0_connection_keys data source to read existing keys. Removing the resource from configuration will NOT DELETE the key.
        name: auth0_connection_keys
        title: auth0_connection_keys
        examples:
            - name: my_keys
              manifest: |-
                {
                  "connection_id": "${auth0_connection.oidc.id}",
                  "triggers": {
                    "date": "2023-10-01T00:00:00Z",
                    "version": "1"
                  }
                }
              references:
                connection_id: auth0_connection.oidc.id
              dependencies:
                auth0_client.my_client: |-
                    {
                      "name": "My-Auth0-Client"
                    }
                auth0_connection.oidc: |-
                    {
                      "name": "OIDC-Connection",
                      "options": [
                        {
                          "authorization_endpoint": "https://example.com",
                          "client_id": "${auth0_client.my_client.id}",
                          "discovery_url": "https://www.paypalobjects.com/.well-known/openid-configuration",
                          "issuer": "https://example.com",
                          "jwks_uri": "https://example.com/jwks",
                          "scopes": [
                            "ext_nested_groups",
                            "openid"
                          ],
                          "token_endpoint_auth_method": "private_key_jwt",
                          "token_endpoint_auth_signing_alg": "RS256",
                          "type": "front_channel"
                        }
                      ],
                      "strategy": "oidc"
                    }
        argumentDocs:
            algorithm: (String) The signing key algorithm.
            cert: (String) The public certificate of the signing key.
            connection_id: (String)
            current: (Boolean) True if the key is the current key.
            current_since: (String) The date and time when the key became the current key.
            fingerprint: (String) The certificate fingerprint.
            id: (String) The ID of this resource.
            key_use: (String) The signing key use, whether for encryption or signing.
            kid: (String) The key ID of the signing key.
            next: (Boolean) True if the key is the next key.
            pkcs: (String) The public certificate of the signing key in PKCS7 format.
            previous: (Boolean) True if the key is the previous key.
            subject_dn: (String) The subject distinguished name (DN) of the certificate.
            thumbprint: (String) The certificate thumbprint.
            triggers: (Map of String) This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
        importStatements: []
    auth0_connection_scim_configuration:
        subCategory: ""
        description: With this resource, you can configure SCIM(System for Cross-domain Identity Management) https://simplecloud.info/ support for SAML and OpenID Connect Enterprise connections.
        name: auth0_connection_scim_configuration
        title: auth0_connection_scim_configuration
        examples:
            - name: my_conn_scim_configuration_default
              manifest: |-
                {
                  "connection_id": "${auth0_connection.my_enterprise_connection.id}"
                }
              references:
                connection_id: auth0_connection.my_enterprise_connection.id
              dependencies:
                auth0_connection.my_enterprise_connection: |-
                    {
                      "display_name": "My Enterprise Connection",
                      "name": "my-enterprise-connection",
                      "options": [
                        {
                          "authorization_endpoint": "https://example.okta.com/oauth2/v1/authorize",
                          "client_id": "1234567",
                          "client_secret": "1234567",
                          "issuer": "https://example.okta.com",
                          "jwks_uri": "https://example.okta.com/oauth2/v1/keys",
                          "token_endpoint": "https://example.okta.com/oauth2/v1/token"
                        }
                      ],
                      "strategy": "okta"
                    }
                auth0_connection.my_enterprise_connection_2: |-
                    {
                      "display_name": "My Enterprise Connection 2",
                      "name": "my-enterprise-connection-2",
                      "options": [
                        {
                          "authorization_endpoint": "https://example.okta.com/oauth2/v1/authorize",
                          "client_id": "1234567",
                          "client_secret": "1234567",
                          "issuer": "https://example.okta.com",
                          "jwks_uri": "https://example.okta.com/oauth2/v1/keys",
                          "token_endpoint": "https://example.okta.com/oauth2/v1/token"
                        }
                      ],
                      "strategy": "okta"
                    }
            - name: my_conn_scim_configuration
              manifest: |-
                {
                  "connection_id": "${auth0_connection.my_enterprise_connection_2.id}",
                  "mapping": [
                    {
                      "auth0": "auth0_attribute1",
                      "scim": "sacim_attribute1"
                    },
                    {
                      "auth0": "auth0_attribute2",
                      "scim": "sacim_attribute2"
                    }
                  ],
                  "user_id_attribute": "attribute1"
                }
              references:
                connection_id: auth0_connection.my_enterprise_connection_2.id
              dependencies:
                auth0_connection.my_enterprise_connection: |-
                    {
                      "display_name": "My Enterprise Connection",
                      "name": "my-enterprise-connection",
                      "options": [
                        {
                          "authorization_endpoint": "https://example.okta.com/oauth2/v1/authorize",
                          "client_id": "1234567",
                          "client_secret": "1234567",
                          "issuer": "https://example.okta.com",
                          "jwks_uri": "https://example.okta.com/oauth2/v1/keys",
                          "token_endpoint": "https://example.okta.com/oauth2/v1/token"
                        }
                      ],
                      "strategy": "okta"
                    }
                auth0_connection.my_enterprise_connection_2: |-
                    {
                      "display_name": "My Enterprise Connection 2",
                      "name": "my-enterprise-connection-2",
                      "options": [
                        {
                          "authorization_endpoint": "https://example.okta.com/oauth2/v1/authorize",
                          "client_id": "1234567",
                          "client_secret": "1234567",
                          "issuer": "https://example.okta.com",
                          "jwks_uri": "https://example.okta.com/oauth2/v1/keys",
                          "token_endpoint": "https://example.okta.com/oauth2/v1/token"
                        }
                      ],
                      "strategy": "okta"
                    }
        argumentDocs:
            auth0: (String) The field location in the Auth0 schema.
            connection_id: (String) ID of the connection for this SCIM configuration.
            connection_name: (String) Name of the connection for this SCIM configuration.
            id: (String) The ID of this resource.
            mapping: (Block Set) Mapping between Auth0 attributes and SCIM attributes. If user_id_attribute is set, mapping must be set as well. (see below for nested schema)
            scim: (String) The field location in the SCIM schema.
            strategy: (String) Schema of the connection for this SCIM configuration.
            tenant_name: (String) Name of the tenant for this SCIM configuration.
            user_id_attribute: (String) User ID attribute for generation unique of user ids. If user_id_attribute is set, mapping must be set as well. Defaults to userName for SAML connections and externalId for OIDC connections.
        importStatements:
            - |-
              # This resource can be imported by specifying the connection ID <connectionID>
              #
              # Example:
              terraform import auth0_connection_scim_configuration.my_conn_scim_conf "con_XXXXX"
    auth0_custom_domain:
        subCategory: ""
        description: With Auth0, you can use a custom domain to maintain a consistent user experience. This resource allows you to create and manage a custom domain within your Auth0 tenant.
        name: auth0_custom_domain
        title: auth0_custom_domain
        examples:
            - name: my_custom_domain
              manifest: |-
                {
                  "domain": "auth.example.com",
                  "domain_metadata": {
                    "key1": "value1",
                    "key2": "value2"
                  },
                  "tls_policy": "recommended",
                  "type": "auth0_managed_certs"
                }
        argumentDocs:
            certificate: (List of Object) The Custom Domain certificate. (see below for nested schema)
            certificate_authority: (String)
            custom_client_ip_header: (String) The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.
            domain: (String) Name of the custom domain.
            domain_metadata: (Map of String) Metadata associated with the Custom Domain. Maximum of 10 metadata properties allowed.
            error_msg: (String)
            id: (String) The ID of this resource.
            last_verified_at: (String)
            methods: (List of Map of String)
            origin_domain_name: (String) Once the configuration status is ready, the DNS name of the Auth0 origin server that handles traffic for the custom domain.
            primary: (Boolean, Deprecated) Indicates whether this is a primary domain.
            renews_before: (String)
            status: (String) Configuration status for the custom domain. Options include disabled, pending, pending_verification, and ready.
            tls_policy: '(String) TLS policy for the custom domain. Available options are: compatible or recommended. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.'
            type: (String) Provisioning type for the custom domain. Options include auth0_managed_certs and self_managed_certs.
            verification: (List of Object) Configuration settings for verification. (see below for nested schema)
        importStatements:
            - |-
              # Custom domains can be imported using their ID.
              #
              # You can find existing custom domain IDs using the Auth0 Management API.
              # https://auth0.com/docs/api/management/v2#!/Custom_Domains/get_custom_domains
              #
              # Example:
              terraform import auth0_custom_domain.my_custom_domain "cd_XXXXXXXXXXXXXXXX"
    auth0_custom_domain_verification:
        subCategory: ""
        description: With Auth0, you can use a custom domain to maintain a consistent user experience. This is a three-step process; you must configure the custom domain in Auth0, then create a DNS record for the domain, then verify the DNS record in Auth0. This resource allows for automating the verification part of the process.
        name: auth0_custom_domain_verification
        title: auth0_custom_domain_verification
        examples:
            - name: my_custom_domain_verification
              manifest: |-
                {
                  "custom_domain_id": "${auth0_custom_domain.my_custom_domain.id}",
                  "depends_on": [
                    "${digitalocean_record.my_domain_name_record}"
                  ],
                  "timeouts": [
                    {
                      "create": "15m"
                    }
                  ]
                }
              references:
                custom_domain_id: auth0_custom_domain.my_custom_domain.id
              dependencies:
                auth0_custom_domain.my_custom_domain: |-
                    {
                      "domain": "login.example.com",
                      "type": "auth0_managed_certs"
                    }
                digitalocean_record.my_domain_name_record: |-
                    {
                      "domain": "example.com",
                      "name": "${trimsuffix(auth0_custom_domain.my_custom_domain.verification[0].methods[0].domain, \".example.com\")}",
                      "type": "${upper(auth0_custom_domain.my_custom_domain.verification[0].methods[0].name)}",
                      "value": "${auth0_custom_domain.my_custom_domain.verification[0].methods[0].record}"
                    }
        argumentDocs:
            cname_api_key: (String, Sensitive) The value of the cname-api-key header to send when forwarding requests. Only present if the type of the custom domain is self_managed_certs and Terraform originally managed the domain's verification.
            create: (String)
            custom_domain_id: (String) ID of the custom domain resource.
            id: (String) The ID of this resource.
            origin_domain_name: (String) The DNS name of the Auth0 origin server that handles traffic for the custom domain.
            timeouts: (Block, Optional) (see below for nested schema)
        importStatements:
            - |-
              # You can import this resource using the custom domain ID.
              #
              # Example:
              terraform import auth0_custom_domain_verification.my_custom_domain_verification "cd_XXXXXXXXXXXXXXXX"
    auth0_email_provider:
        subCategory: ""
        description: With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email providers, so you can route all emails that are part of Auth0's authentication workflows through the supported high-volume email service of your choice.
        name: auth0_email_provider
        title: auth0_email_provider
        examples:
            - name: amazon_ses_email_provider
              manifest: |-
                {
                  "credentials": [
                    {
                      "access_key_id": "AKIAXXXXXXXXXXXXXXXX",
                      "region": "us-east-1",
                      "secret_access_key": "7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "default_from_address": "accounts@example.com",
                  "enabled": true,
                  "name": "ses"
                }
              dependencies:
                auth0_action.custom_email_provider_action: |-
                    {
                      "code": "/**\n * Handler to be executed while sending an email notification.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {CustomEmailProviderAPI} api - Methods and utilities to help change the behavior of sending a email notification.\n */\n exports.onExecuteCustomEmailProvider = async (event, api) =\u003e {\n  // Code goes here\n  console.log(event);\n  return;\n };\n",
                      "deploy": true,
                      "name": "custom-email-provider-action",
                      "runtime": "node18",
                      "supported_triggers": [
                        {
                          "id": "custom-email-provider",
                          "version": "v1"
                        }
                      ]
                    }
            - name: smtp_email_provider
              manifest: |-
                {
                  "credentials": [
                    {
                      "smtp_host": "your.smtp.host.com",
                      "smtp_pass": "SMTP Password",
                      "smtp_port": 583,
                      "smtp_user": "SMTP Username"
                    }
                  ],
                  "default_from_address": "accounts@example.com",
                  "enabled": true,
                  "name": "smtp"
                }
              dependencies:
                auth0_action.custom_email_provider_action: |-
                    {
                      "code": "/**\n * Handler to be executed while sending an email notification.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {CustomEmailProviderAPI} api - Methods and utilities to help change the behavior of sending a email notification.\n */\n exports.onExecuteCustomEmailProvider = async (event, api) =\u003e {\n  // Code goes here\n  console.log(event);\n  return;\n };\n",
                      "deploy": true,
                      "name": "custom-email-provider-action",
                      "runtime": "node18",
                      "supported_triggers": [
                        {
                          "id": "custom-email-provider",
                          "version": "v1"
                        }
                      ]
                    }
            - name: sendgrid_email_provider
              manifest: |-
                {
                  "credentials": [
                    {
                      "api_key": "secretAPIKey"
                    }
                  ],
                  "default_from_address": "accounts@example.com",
                  "enabled": true,
                  "name": "sendgrid"
                }
              dependencies:
                auth0_action.custom_email_provider_action: |-
                    {
                      "code": "/**\n * Handler to be executed while sending an email notification.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {CustomEmailProviderAPI} api - Methods and utilities to help change the behavior of sending a email notification.\n */\n exports.onExecuteCustomEmailProvider = async (event, api) =\u003e {\n  // Code goes here\n  console.log(event);\n  return;\n };\n",
                      "deploy": true,
                      "name": "custom-email-provider-action",
                      "runtime": "node18",
                      "supported_triggers": [
                        {
                          "id": "custom-email-provider",
                          "version": "v1"
                        }
                      ]
                    }
            - name: azure_cs_email_provider
              manifest: |-
                {
                  "credentials": [
                    {
                      "azure_cs_connection_string": "azure_cs_connection_string"
                    }
                  ],
                  "default_from_address": "accounts@example.com",
                  "enabled": true,
                  "name": "azure_cs"
                }
              dependencies:
                auth0_action.custom_email_provider_action: |-
                    {
                      "code": "/**\n * Handler to be executed while sending an email notification.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {CustomEmailProviderAPI} api - Methods and utilities to help change the behavior of sending a email notification.\n */\n exports.onExecuteCustomEmailProvider = async (event, api) =\u003e {\n  // Code goes here\n  console.log(event);\n  return;\n };\n",
                      "deploy": true,
                      "name": "custom-email-provider-action",
                      "runtime": "node18",
                      "supported_triggers": [
                        {
                          "id": "custom-email-provider",
                          "version": "v1"
                        }
                      ]
                    }
            - name: ms365_email_provider
              manifest: |-
                {
                  "credentials": [
                    {
                      "ms365_client_id": "ms365_client_id",
                      "ms365_client_secret": "ms365_client_secret",
                      "ms365_tenant_id": "ms365_tenant_id"
                    }
                  ],
                  "default_from_address": "accounts@example.com",
                  "enabled": true,
                  "name": "ms365"
                }
              dependencies:
                auth0_action.custom_email_provider_action: |-
                    {
                      "code": "/**\n * Handler to be executed while sending an email notification.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {CustomEmailProviderAPI} api - Methods and utilities to help change the behavior of sending a email notification.\n */\n exports.onExecuteCustomEmailProvider = async (event, api) =\u003e {\n  // Code goes here\n  console.log(event);\n  return;\n };\n",
                      "deploy": true,
                      "name": "custom-email-provider-action",
                      "runtime": "node18",
                      "supported_triggers": [
                        {
                          "id": "custom-email-provider",
                          "version": "v1"
                        }
                      ]
                    }
            - name: custom_email_provider
              manifest: |-
                {
                  "credentials": [
                    {}
                  ],
                  "default_from_address": "accounts@example.com",
                  "depends_on": [
                    "${auth0_action.custom_email_provider_action}"
                  ],
                  "enabled": true,
                  "name": "custom"
                }
              dependencies:
                auth0_action.custom_email_provider_action: |-
                    {
                      "code": "/**\n * Handler to be executed while sending an email notification.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {CustomEmailProviderAPI} api - Methods and utilities to help change the behavior of sending a email notification.\n */\n exports.onExecuteCustomEmailProvider = async (event, api) =\u003e {\n  // Code goes here\n  console.log(event);\n  return;\n };\n",
                      "deploy": true,
                      "name": "custom-email-provider-action",
                      "runtime": "node18",
                      "supported_triggers": [
                        {
                          "id": "custom-email-provider",
                          "version": "v1"
                        }
                      ]
                    }
        argumentDocs:
            access_key_id: (String, Sensitive) AWS Access Key ID. Used only for AWS.
            api_key: (String, Sensitive) API Key for your email service. Will always be encrypted in our database.
            azure_cs_connection_string: (String, Sensitive) Azure Communication Services Connection String.
            configuration_set_name: (String) Setting for the ses email provider. The name of the configuration set to apply to the sent emails.
            credentials: '(Block List, Min: 1, Max: 1) Configuration settings for the credentials for the email provider. (see below for nested schema)'
            default_from_address: (String) Email address to use as the sender when no other "from" address is specified.
            domain: (String) Domain name.
            enabled: (Boolean) Indicates whether the email provider is enabled.
            headers: '(Block List, Max: 1) Headers settings for the smtp email provider. (see below for nested schema)'
            id: (String) The ID of this resource.
            message: '(Block List, Max: 1) Message settings for the mandrill or ses email provider. (see below for nested schema)'
            ms365_client_id: (String, Sensitive) Microsoft 365 Client ID.
            ms365_client_secret: (String, Sensitive) Microsoft 365 Client Secret.
            ms365_tenant_id: (String, Sensitive) Microsoft 365 Tenant ID.
            name: (String) Name of the email provider. Options include azure_cs, custom, mailgun, mandrill, ms365, sendgrid, ses, smtp and sparkpost.
            region: (String) Default region. Used only for AWS, Mailgun, and SparkPost.
            secret_access_key: (String, Sensitive) AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
            settings: '(Block List, Max: 1) Specific email provider settings. (see below for nested schema)'
            smtp_host: (String) Hostname or IP address of your SMTP server. Used only for SMTP.
            smtp_pass: (String, Sensitive) SMTP password. Used only for SMTP.
            smtp_port: (Number) Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
            smtp_user: (String) SMTP username. Used only for SMTP.
            view_content_link: (Boolean) Setting for the mandrill email provider. Set to true to see the content of individual emails sent to users.
            x_mc_view_content_link: (String) Disable or enable the default View Content Link for sensitive emails.
            x_ses_configuration_set: (String) SES Configuration set to include when sending emails.
        importStatements:
            - |-
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # email can be imported using a random string.
              #
              # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
              #
              # Example:
              terraform import auth0_email_provider.my_email_provider "b4213dc2-2eed-42c3-9516-c6131a9ce0b0"
    auth0_email_template:
        subCategory: ""
        description: With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email templates to customize the look, feel, and sender identities of emails sent by Auth0. Used in conjunction with configured email providers.
        name: auth0_email_template
        title: auth0_email_template
        examples:
            - name: my_email_template
              manifest: |-
                {
                  "body": "\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e",
                  "depends_on": [
                    "${auth0_email_provider.my_email_provider}"
                  ],
                  "enabled": true,
                  "from": "welcome@example.com",
                  "result_url": "https://example.com/welcome",
                  "subject": "Welcome",
                  "syntax": "liquid",
                  "template": "welcome_email",
                  "url_lifetime_in_seconds": 3600
                }
              dependencies:
                auth0_email_provider.my_email_provider: |-
                    {
                      "credentials": [
                        {
                          "access_key_id": "AKIAXXXXXXXXXXXXXXXX",
                          "region": "us-east-1",
                          "secret_access_key": "7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                        }
                      ],
                      "default_from_address": "accounts@example.com",
                      "enabled": true,
                      "name": "ses"
                    }
        argumentDocs:
            body: (String) Body of the email template. You can include common variables.
            enabled: (Boolean) Indicates whether the template is enabled.
            from: (String) Email address to use as the sender. You can include common variables.
            id: (String) The ID of this resource.
            include_email_in_redirect: (Boolean) Whether the reset_email and verify_email templates should include the user's email address as the email parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true.
            result_url: (String) URL to redirect the user to after a successful action. Learn more.
            subject: (String) Subject line of the email. You can include common variables.
            syntax: (String) Syntax of the template body. You can use either text or HTML with Liquid syntax.
            template: (String) Template name. Options include verify_email, verify_email_by_code, reset_email, reset_email_by_code, welcome_email, blocked_account, stolen_credentials, enrollment_email, mfa_oob_code, user_invitation, change_password (legacy), or password_reset (legacy).
            url_lifetime_in_seconds: (Number) Number of seconds during which the link within the email will be valid.
        importStatements:
            - |-
              # This resource can be imported using the pre-defined template name.
              #
              # These names are `verify_email`, `verify_email_by_code`, `reset_email`,
              # `welcome_email`, `blocked_account`, `stolen_credentials`,
              # `enrollment_email`, `mfa_oob_code`, and `user_invitation`.
              #
              # The names `change_password`, and `password_reset` are also supported
              # for legacy scenarios.
              #
              # Example:
              terraform import auth0_email_template.my_email_template "welcome_email"
    auth0_encryption_key_manager:
        subCategory: ""
        description: Resource to allow the rekeying of your tenant master key.
        name: auth0_encryption_key_manager
        title: auth0_encryption_key_manager
        examples:
            - name: my_key_manager_initial
              manifest: |-
                {
                  "key_rotation_id": "da9f2f3b-1c7e-4245-8982-9a25da8407c4"
                }
            - name: my_key_manager_rekey
              manifest: |-
                {
                  "key_rotation_id": "68feba2c-7768-40f3-9d71-4b91e0233abf"
                }
            - name: my_key_manager
              manifest: |-
                {
                  "customer_provided_root_key": [
                    {}
                  ]
                }
            - name: my_key_manager
              manifest: |-
                {
                  "customer_provided_root_key": [
                    {
                      "wrapped_key": "miw4MHtx9BriXv4FDNOT930z0+MaK8HXvLI8clu0bS7LgfeLmAW8e59QP2QD1VfNTB7uvD5lYgsK92G3X5G95qNWJjZ8euEk1fM1+vtONQptqQyBdTWW4ZcJadaodASsJrSMXfSD+xJ3Lh45yEmkeENSDi60ZxKu5qUYuZmPWpEXeohPakJSm5X1qNVNLCOzBhNNG+OMEp8FVXtXnZTZVNtjbG2peVRpLlNGQkGfCWSY2VjpJkMcqf7DTRTF+USv9G1GHirRYkdVmlAOLfn/iwAHhIJlOqWYEhwkglIctMzX8mxW6VHCS3gptvcRk2j3eYNcw7BBrumuF+DE0NgQmmKaz0nRkHFRlv9RMRhk0qweHWPrp5Y2gCv+6du/m9FVMsNOSR0+4eSWsgOQw5B8gRs+4NfHm2N5sK2CRfzJ3mVNJjysaaag6TrTPbQjwlmcg5+DzeSc87Af5lwUvWT/kXPOGzVUNv9cF0FX7JM06UBQv5vfuU5zL/6VvszqCyjdxvbLgtGU1j/Hev++gKCfTQ8UcpegYxM6Ea60y4Qb3OezfdFE8R8eZg=="
                    }
                  ]
                }
        argumentDocs:
            created_at: (String) The ISO 8601 formatted date the customer provided root key was created.
            customer_provided_root_key: '(Block List, Max: 1) This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty customer_provided_root_key block. After applying this, the public_wrapping_key can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the wrapped_key attribute. (see below for nested schema)'
            encryption_keys: (List of Object) All encryption keys. (see below for nested schema)
            id: (String) The ID of this resource.
            key_id: (String) The key ID of the customer provided root key.
            key_rotation_id: (String) If this value is changed, the encryption keys will be rotated. A UUID is recommended for the key_rotation_id.
            parent_key_id: (String) The key ID of the parent wrapping key.
            public_wrapping_key: (String) The public wrapping key in PEM format.
            state: (String) The state of the encryption key. One of pre-activation, active, deactivated, or destroyed.
            type: (String) The type of the customer provided root key. Should be customer-provided-root-key.
            updated_at: (String) The ISO 8601 formatted date the customer provided root key was updated.
            wrapped_key: (String) The base64-encoded customer provided root key, wrapped using the public_wrapping_key. This can be removed after the wrapped key has been applied.
            wrapping_algorithm: (String) The algorithm that should be used to wrap the customer provided root key. Should be CKM_RSA_AES_KEY_WRAP.
        importStatements: []
    auth0_flow:
        subCategory: ""
        description: With this resource, you can create and manage Flows for a tenant.
        name: auth0_flow
        title: auth0_flow
        examples:
            - name: my_flow
              manifest: |-
                {
                  "actions": "${jsonencode([{\n    action        = \"UPDATE_USER\"\n    alias         = \"user meta data\"\n    allow_failure = false\n    id            = \"update_user_PmSa\"\n    mask_output   = false\n    params = {\n      changes = {\n        user_metadata = {\n          full_name = \"{{fields.full_name}}\"\n        }\n      }\n      connection_id = \"\u003cvault_connection_id\u003e\" #  Altenative ways: (connection_id = auth0_flow_vault_connection.my_connection.id) or using terraform variables\n      user_id       = \"{{context.user.user_id}}\"\n    }\n    type = \"AUTH0\"\n  }])}",
                  "name": "Flow KYC update data"
                }
        argumentDocs:
            actions: (String) Actions of the flow.
            id: (String) The ID of this resource.
            name: (String) Name of the flow.
        importStatements:
            - |-
              # This resource can be imported using the flow ID.
              #
              # Example:
              terraform import auth0_flow.my_flow "af_4JwsAjokf6DpK8xJCkTRjK"
    auth0_flow_vault_connection:
        subCategory: ""
        description: With this resource, you can create and manage flow vault connections for a tenant.
        name: auth0_flow_vault_connection
        title: auth0_flow_vault_connection
        examples:
            - name: my_connection
              manifest: |-
                {
                  "app_id": "AUTH0",
                  "name": "Auth0 M2M Connection",
                  "setup": {
                    "client_id": "******************",
                    "client_secret": "*********************************",
                    "domain": "*****************************",
                    "type": "OAUTH_APP"
                  }
                }
        argumentDocs:
            account_name: (String) Custom account name of the vault connection.
            app_id: (String) App identifier of the vault connection.
            environment: (String) Environment of the vault connection.
            fingerprint: (String) Fingerprint of the vault connection.
            id: (String) The ID of this resource.
            name: (String) Name of the vault connection.
            ready: (Boolean) Indicates if the vault connection is configured.
            setup: (Map of String, Sensitive) Configuration of the vault connection. (Mapping information must be provided as key/value pairs)
        importStatements:
            - |-
              # This resource can be imported using the flow vault connection ID.
              #
              # Example:
              terraform import auth0_flow_vault_connection.my_connection "ac_42HT5oiobDyUs8ASwEEWK0"
    auth0_form:
        subCategory: ""
        description: With this resource, you can create and manage Forms for a tenant.
        name: auth0_form
        title: auth0_form
        examples:
            - name: my_form
              manifest: |-
                {
                  "ending": "${jsonencode({\n    after_submit = {\n      flow_id = \"\u003cmy_flow_id\u003e\" # Altenative ways: (flow_id = auth0_flow.my_flow.id) or using terraform variables\n    }\n    coordinates = {\n      x = 1250\n      y = 0\n    }\n    resume_flow = true\n  })}",
                  "languages": [
                    {
                      "default": "en",
                      "primary": "en"
                    }
                  ],
                  "messages": [
                    {
                      "errors": "${jsonencode({\n      ERR_REQUIRED_PROPERTY = \"This field is required for user kyc.\"\n    })}"
                    }
                  ],
                  "name": "My KYC Form",
                  "nodes": "${jsonencode([{\n    alias = \"New step\"\n    config = {\n      components = [{\n        category = \"FIELD\"\n        config = {\n          max_length = 50\n          min_length = 1\n          multiline  = false\n        }\n        id        = \"full_name\"\n        label     = \"Your Name\"\n        required  = true\n        sensitive = false\n        type      = \"TEXT\"\n        }, {\n        category = \"BLOCK\"\n        config = {\n          text = \"Continue\"\n        }\n        id   = \"next_button_3FbA\"\n        type = \"NEXT_BUTTON\"\n      }]\n      next_node = \"$ending\"\n    }\n    coordinates = {\n      x = 500\n      y = 0\n    }\n    id   = \"step_ggeX\"\n    type = \"STEP\"\n  }])}",
                  "start": "${jsonencode({\n    coordinates = {\n      x = 0\n      y = 0\n    }\n    next_node = \"step_ggeX\"\n  })}",
                  "style": "${jsonencode({\n    css = \"h1 {\\n  color: white;\\n  text-align: center;\\n}\"\n  })}",
                  "translations": "${jsonencode({\n    es = {\n      components = {\n        rich_text_uctu = {\n          config = {\n            content = \"\u003ch2\u003eHelp us verify your personal information\u003c/h2\u003e\u003cp\u003eWe want to learn more about you so that we can validate and protect your account...\u003c/p\u003e\"\n          }\n        }\n      }\n      messages = {\n        custom = {}\n        errors = {\n          ERR_ACCEPTANCE_REQUIRED = \"Por favor, marca este campo para continuar.\"\n        }\n      }\n    }\n  })}"
                }
        argumentDocs:
            custom: (String) Custom message for the form. (JSON encoded)
            default: (String) Default language for the form.
            ending: (String) Submission configuration of the form. (JSON encoded)
            errors: (String) Error message for the form. (JSON encoded)
            id: (String) The ID of this resource.
            languages: (Block List) Language specific configuration for the form. (see below for nested schema)
            messages: (Block List) Message specific configuration for the form. (see below for nested schema)
            name: (String) Name of the form.
            nodes: (String) Nodes of the form. (JSON encoded)
            primary: (String) Primary language for the form.
            start: (String) Input setup of the form. (JSON encoded)
            style: (String) Style specific configuration for the form. (JSON encoded)
            translations: (String) Translations of the form. (JSON encoded)
        importStatements:
            - |-
              # This resource can be imported using the form ID.
              #
              # Example:
              terraform import auth0_form.my_form "ap_ojkKbiPMG6J5E5VCKdeCzK"
    auth0_guardian:
        subCategory: ""
        description: Multi-Factor Authentication works by requiring additional factors during the login process to prevent unauthorized access. With this resource you can configure some options available for MFA.
        name: auth0_guardian
        title: auth0_guardian
        examples:
            - name: my_guardian
              manifest: |-
                {
                  "duo": [
                    {
                      "enabled": true,
                      "hostname": "api-hostname",
                      "integration_key": "someKey",
                      "secret_key": "someSecret"
                    }
                  ],
                  "email": true,
                  "otp": true,
                  "phone": [
                    {
                      "enabled": true,
                      "message_types": [
                        "sms",
                        "voice"
                      ],
                      "options": [
                        {
                          "enrollment_message": "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
                          "verification_message": "{{code}} is your verification code for {{tenant.friendly_name}}."
                        }
                      ],
                      "provider": "auth0"
                    }
                  ],
                  "policy": "all-applications",
                  "push": [
                    {
                      "amazon_sns": [
                        {
                          "aws_access_key_id": "test1",
                          "aws_region": "us-west-1",
                          "aws_secret_access_key": "secretKey",
                          "sns_apns_platform_application_arn": "test_arn",
                          "sns_gcm_platform_application_arn": "test_arn"
                        }
                      ],
                      "custom_app": [
                        {
                          "app_name": "CustomApp",
                          "apple_app_link": "https://itunes.apple.com/us/app/my-app/id123121",
                          "google_app_link": "https://play.google.com/store/apps/details?id=com.my.app"
                        }
                      ],
                      "enabled": true,
                      "provider": "sns"
                    }
                  ],
                  "recovery_code": true,
                  "webauthn_platform": [
                    {
                      "enabled": true
                    }
                  ],
                  "webauthn_roaming": [
                    {
                      "enabled": true,
                      "user_verification": "required"
                    }
                  ]
                }
        argumentDocs:
            amazon_sns: '(Block List, Max: 1) Configuration for Amazon SNS. (see below for nested schema)'
            app_name: (String) Custom Application Name.
            apple_app_link: (String) Apple App Store URL. Must be HTTPS or an empty string.
            auth_token: (String, Sensitive) AuthToken for your Twilio account.
            aws_access_key_id: (String) Your AWS Access Key ID.
            aws_region: (String) Your AWS application's region.
            aws_secret_access_key: (String, Sensitive) Your AWS Secret Access Key.
            bundle_id: (String) The Apple Push Notification service Bundle ID.
            custom_app: '(Block List, Max: 1) Configuration for the Guardian Custom App. (see below for nested schema)'
            direct_apns: '(Block List, Max: 1) Configuration for the Apple Push Notification service (APNs) settings. (see below for nested schema)'
            direct_fcm: '(Block List, Max: 1) Configuration for Firebase Cloud Messaging (FCM) settings. (see below for nested schema)'
            duo: '(Block List, Max: 1) Configuration settings for the Duo MFA. If this block is present, Duo MFA will be enabled, and disabled otherwise. (see below for nested schema)'
            email: (Boolean) Indicates whether email MFA is enabled.
            enabled: (Boolean) Indicates whether Duo MFA is enabled.
            enrollment_message: (String) This message will be sent whenever a user enrolls a new device for the first time using MFA. Supports Liquid syntax, see Auth0 docs.
            from: (String) Phone number to use as the sender.
            google_app_link: (String) Google Store URL. Must be HTTPS or an empty string.
            hostname: (String) Duo API Hostname, see the Duo documentation for more details on Duo setup.
            id: (String) The ID of this resource.
            integration_key: (String) Duo client ID, see the Duo documentation for more details on Duo setup.
            message_types: (List of String) Message types to use, array of sms and/or voice. Adding both to the array should enable the user to choose.
            messaging_service_sid: (String) Messaging service SID.
            options: '(Block List, Max: 1) Options for the various providers. (see below for nested schema)'
            otp: (Boolean) Indicates whether one time password MFA is enabled.
            override_relying_party: (Boolean) The Relying Party is the domain for which the WebAuthn keys will be issued, set to true if you are customizing the identifier.
            p12: (String, Sensitive) The base64 encoded certificate in P12 format.
            phone: '(Block List, Max: 1) Configuration settings for the phone MFA. If this block is present, Phone MFA will be enabled, and disabled otherwise. (see below for nested schema)'
            policy: (String) Policy to use. Available options are never, all-applications and confidence-score.
            provider: (String) Provider to use, one of auth0, twilio or phone-message-hook. Selecting phone-message-hook will require a Phone Message Action to be created before. Learn how.
            push: '(Block List, Max: 1) Configuration settings for the Push MFA. If this block is present, Push MFA will be enabled, and disabled otherwise. (see below for nested schema)'
            recovery_code: (Boolean) Indicates whether recovery code MFA is enabled.
            relying_party_identifier: (String) The Relying Party should be a suffix of the custom domain.
            sandbox: (Boolean) Set to true to use the sandbox iOS app environment, otherwise set to false to use the production iOS app environment.
            secret_key: (String, Sensitive) Duo client secret, see the Duo documentation for more details on Duo setup.
            server_key: (String, Sensitive) The Firebase Cloud Messaging Server Key. For security purposes, we don’t retrieve your existing FCM server key to check for drift.
            sid: (String) SID for your Twilio account.
            sns_apns_platform_application_arn: (String) The Amazon Resource Name for your Apple Push Notification Service.
            sns_gcm_platform_application_arn: (String) The Amazon Resource Name for your Firebase Cloud Messaging Service.
            user_verification: (String) User verification, one of discouraged, preferred or required.
            verification_message: (String) This message will be sent whenever a user logs in after the enrollment. Supports Liquid syntax, see Auth0 docs.
            webauthn_platform: '(Block List, Max: 1) Configuration settings for the WebAuthn with FIDO Device Biometrics MFA. If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise. (see below for nested schema)'
            webauthn_roaming: '(Block List, Max: 1) Configuration settings for the WebAuthn with FIDO Security Keys MFA. If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise. (see below for nested schema)'
        importStatements:
            - |-
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # guardian can be imported using a random string.
              #
              # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
              #
              # Example:
              terraform import auth0_guardian.my_guardian "24940d4b-4bd4-44e7-894e-f92e4de36a40"
    auth0_hook:
        subCategory: ""
        description: Hooks are secure, self-contained functions that allow you to customize the behavior of Auth0 when executed for selected extensibility points of the Auth0 platform. Auth0 invokes Hooks during runtime to execute your custom Node.js code. Depending on the extensibility point, you can use hooks with Database Connections and/or Passwordless Connections. !> This resource is deprecated. Refer to the guide on how to migrate from hooks to actions https://auth0.com/docs/customize/actions/migrate/migrate-from-hooks-to-actions and manage your actions using the auth0_action resource.
        name: auth0_hook
        title: auth0_hook
        examples:
            - name: my_hook
              manifest: |-
                {
                  "dependencies": {
                    "auth0": "2.30.0"
                  },
                  "enabled": true,
                  "name": "My Pre User Registration Hook",
                  "script": "    function (user, context, callback) {\n      callback(null, { user });\n    }\n",
                  "secrets": {
                    "foo": "bar"
                  },
                  "trigger_id": "pre-user-registration"
                }
        argumentDocs:
            dependencies: (Map of String) Dependencies of this hook used by the WebTask server.
            enabled: (Boolean) Whether the hook is enabled, or disabled.
            id: (String) The ID of this resource.
            name: (String) Name of this hook.
            script: (String) Code to be executed when this hook runs.
            secrets: (Map of String, Sensitive) The secrets associated with the hook.
            trigger_id: (String) Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.
        importStatements:
            - |-
              # This resource can be imported by specifying the hook ID.
              #
              # Example:
              terraform import auth0_hook.my_hook "00001"
    auth0_log_stream:
        subCategory: ""
        description: With this resource, you can manage your Auth0 log streams.
        name: auth0_log_stream
        title: auth0_log_stream
        examples:
            - name: my_webhook
              manifest: |-
                {
                  "filters": [
                    {
                      "name": "auth.login.fail",
                      "type": "category"
                    },
                    {
                      "name": "auth.signup.fail",
                      "type": "category"
                    }
                  ],
                  "name": "HTTP log stream",
                  "sink": [
                    {
                      "http_authorization": "AKIAXXXXXXXXXXXXXXXX",
                      "http_content_format": "JSONOBJECT",
                      "http_content_type": "application/json",
                      "http_custom_headers": [
                        {
                          "header": "foo",
                          "value": "bar"
                        }
                      ],
                      "http_endpoint": "https://example.com/logs"
                    }
                  ],
                  "type": "http"
                }
            - name: example_aws
              manifest: |-
                {
                  "name": "AWS Eventbridge",
                  "sink": [
                    {
                      "aws_account_id": "my_account_id",
                      "aws_region": "us-east-2"
                    }
                  ],
                  "status": "active",
                  "type": "eventbridge"
                }
        argumentDocs:
            algorithm: (String) The algorithm to use for PII handling. Currently, only xxhash is supported.
            aws_account_id: (String) The AWS Account ID.
            aws_partner_event_source: (String) Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.
            aws_region: '(String) The region in which the EventBridge event source will be created. Possible values: ap-east-1, ap-northeast-1, ap-northeast-2, ap-northeast-3, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, me-south-1, sa-east-1, us-gov-east-1, us-gov-west-1, us-east-1, us-east-2, us-west-1, us-west-2.'
            azure_partner_topic: (String) Name of the Partner Topic to be used with Azure. Generally should not be specified.
            azure_region: '(String) The Azure region code. Possible values: australiacentral, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, southafricanorth, southcentralus, southeastasia, southindia, switzerlandnorth, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.'
            azure_resource_group: (String) The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.
            azure_subscription_id: (String) The unique alphanumeric string that identifies your Azure subscription.
            datadog_api_key: (String, Sensitive) The Datadog API key.
            datadog_region: '(String) The Datadog region. Possible values: us, eu, us3, us5.'
            filters: '(List of Map of String) Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: auth.ancillary.fail, auth.ancillary.success, auth.login.fail, auth.login.notification, auth.login.success, auth.logout.fail, auth.logout.success, auth.signup.fail, auth.signup.success, auth.silent_auth.fail, auth.silent_auth.success, auth.token_exchange.fail, auth.token_exchange.success, management.fail, management.success, system.notification, user.fail, user.notification, user.success, other.'
            http_authorization: (String, Sensitive) Sent in the HTTP "Authorization" header with each request.
            http_content_format: (String) The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
            http_content_type: (String) The "Content-Type" header to send over HTTP. Common value is "application/json".
            http_custom_headers: (List of Map of String) Additional HTTP headers to be included as part of the HTTP request.
            http_endpoint: (String) The HTTP endpoint to send streaming logs.
            id: (String) The ID of this resource.
            is_priority: (Boolean) Set True for priority log streams, False for non-priority
            log_fields: (List of String)
            method: (String) The method to use for PII handling. Options are hash or mask.
            mixpanel_project_id: (String) The Mixpanel project ID, found on the Project Settings page.
            mixpanel_region: (String) The Mixpanel region. Options are ["us", "eu"]. EU is required for customers with EU data residency requirements.
            mixpanel_service_account_password: (String, Sensitive) The Mixpanel Service Account password.
            mixpanel_service_account_username: (String) The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.
            name: (String) Name of the log stream.
            pii_config: '(Block List, Max: 1) Configuration for PII (Personally Identifiable Information) handling. (see below for nested schema)'
            segment_write_key: (String, Sensitive) The Segment Write Key.
            sink: '(Block List, Min: 1, Max: 1) The sink configuration for the log stream. (see below for nested schema)'
            splunk_domain: (String) The Splunk domain name.
            splunk_port: (String) The Splunk port.
            splunk_secure: (Boolean) This toggle should be turned off when using self-signed certificates.
            splunk_token: (String, Sensitive) The Splunk access token.
            status: (String) The current status of the log stream. Options are "active", "paused", "suspended".
            sumo_source_address: (String) Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.
            type: '(String) Type of the log stream, which indicates the sink provider. Options include: eventbridge, eventgrid, http, datadog, splunk, sumo, mixpanel, segment.'
        importStatements:
            - |-
              # This resource can be imported by specifying the log stream ID.
              #
              # Example:
              terraform import auth0_log_stream.example "lst_XXXXXXXXXXXXXXXX"
    auth0_network_acl:
        subCategory: ""
        description: With this resource, you can create and manage NetworkACLs for a tenant.
        name: auth0_network_acl
        title: auth0_network_acl
        examples:
            - name: my_network_acl_match
              manifest: |-
                {
                  "active": true,
                  "description": "Example with match network ACL",
                  "priority": 1,
                  "rule": [
                    {
                      "action": [
                        {
                          "allow": true
                        }
                      ],
                      "match": [
                        {
                          "geo_country_codes": [
                            "US",
                            "CA"
                          ],
                          "geo_subdivision_codes": [
                            "US-NY",
                            "CA-ON"
                          ]
                        }
                      ],
                      "scope": "management"
                    }
                  ]
                }
            - name: my_network_acl_not_match
              manifest: |-
                {
                  "active": true,
                  "description": "Example with not match network ACL",
                  "priority": 3,
                  "rule": [
                    {
                      "action": [
                        {
                          "log": true
                        }
                      ],
                      "not_match": [
                        {
                          "asns": [
                            9876
                          ],
                          "ipv4_cidrs": [
                            "192.168.1.0/24",
                            "10.0.0.0/8"
                          ],
                          "ipv6_cidrs": [
                            "2001:db8::/32"
                          ]
                        }
                      ],
                      "scope": "authentication"
                    }
                  ]
                }
        argumentDocs:
            action: '(Block List, Min: 1, Max: 1) The action configuration for the Network ACL Rule. Only one action type (block, allow, log, or redirect) should be specified. (see below for nested schema)'
            active: (Boolean) Whether the Network ACL is active
            allow: (Boolean) If true, allows the request. When using allow action, no other properties should be set.
            asns: (List of Number) ASNs. Must contain between 1 and 10 unique items.
            block: (Boolean) If true, blocks the request. When using block action, no other properties should be set.
            description: (String) The description of the Network ACL
            geo_country_codes: (List of String) Geo Country Codes. Must contain between 1 and 10 unique items.
            geo_subdivision_codes: (List of String) Geo Subdivision Codes. Must contain between 1 and 10 unique items.
            id: (String) The ID of this resource.
            ipv4_cidrs: (List of String) IPv4 CIDRs. Must contain between 1 and 10 unique items. Can be IPv4 addresses or CIDR blocks.
            ipv6_cidrs: (List of String) IPv6 CIDRs. Must contain between 1 and 10 unique items. Can be IPv6 addresses or CIDR blocks.
            ja3_fingerprints: (List of String) JA3 Fingerprints. Must contain between 1 and 10 unique items.
            ja4_fingerprints: (List of String) JA4 Fingerprints. Must contain between 1 and 10 unique items.
            log: (Boolean) If true, logs the request. When using log action, no other properties should be set.
            match: '(Block List, Max: 1) The configuration for the Network ACL Rule (see below for nested schema)'
            not_match: '(Block List, Max: 1) The configuration for the Network ACL Rule (see below for nested schema)'
            priority: (Number) The priority of the Network ACL. Must be unique between 1 and 10.
            redirect: (Boolean) If true, redirects the request. When using redirect action, redirect_uri must also be specified.
            redirect_uri: (String) The URI to redirect to when redirect is true. Required when redirect is true. Must be between 1 and 2000 characters.
            rule: '(Block List, Min: 1, Max: 1) The rule of the Network ACL (see below for nested schema)'
            scope: (String) The scope of the Network ACL Rule
            user_agents: (List of String) User Agents. Must contain between 1 and 10 unique items.
        importStatements:
            - |-
              # This resource can be imported using the network acl ID.
              #
              # Example:
              terraform import auth0_network_acl.my_network_acl "167f9a50-4444-3333-1111-ndfdaf953ab4"
    auth0_organization:
        subCategory: ""
        description: 'The Organizations feature represents a broad update to the Auth0 platform that allows our business-to-business (B2B) customers to better manage their partners and customers, and to customize the ways that end-users access their applications. Auth0 customers can use Organizations to: Represent their business customers and partners in Auth0 and manage their membership.Configure branded, federated login flows for each business.Build administration capabilities into their products, using Organizations APIs, so that those businesses can manage their own organizations.'
        name: auth0_organization
        title: auth0_organization
        examples:
            - name: my_organization
              manifest: |-
                {
                  "branding": [
                    {
                      "colors": {
                        "page_background": "#e1e1e1",
                        "primary": "#f2f2f2"
                      },
                      "logo_url": "https://example.com/assets/icons/icon.png"
                    }
                  ],
                  "display_name": "Auth0 Inc.",
                  "name": "auth0-inc"
                }
        argumentDocs:
            branding: '(Block List, Max: 1) Defines how to style the login pages. (see below for nested schema)'
            client_credentials: '(Block List, Min: 1, Max: 1) The token quota configuration for client credentials. (see below for nested schema)'
            colors: (Map of String) Color scheme used to customize the login pages.
            display_name: (String) Friendly name of this organization.
            enforce: (Boolean) If enabled, the quota will be enforced and requests in excess of the quota will fail. If disabled, the quota will not be enforced, but notifications for requests exceeding the quota will be available in logs.
            id: (String) The ID of this resource.
            logo_url: (String) URL of logo to display on login page.
            metadata: (Map of String) Metadata associated with the organization. Maximum of 10 metadata properties allowed.
            name: (String) The name of this organization.
            per_day: (Number) Maximum number of issued tokens per day
            per_hour: (Number) Maximum number of issued tokens per hour
            token_quota: '(Block List, Max: 1) The token quota configuration. (see below for nested schema)'
        importStatements:
            - |-
              # This resource can be imported by specifying the organization ID.
              #
              # Example:
              terraform import auth0_organization.my_organization "org_XXXXXXXXXXXXXX"
    auth0_organization_client_grant:
        subCategory: ""
        description: With this resource, you can manage a client grant associated with an organization.
        name: auth0_organization_client_grant
        title: auth0_organization_client_grant
        examples:
            - name: associate_org_client_grant
              manifest: |-
                {
                  "depends_on": [
                    "${auth0_client_grant.my_client_grant}"
                  ],
                  "grant_id": "${auth0_client_grant.my_client_grant.id}",
                  "organization_id": "${auth0_organization.my_organization.id}"
                }
              references:
                grant_id: auth0_client_grant.my_client_grant.id
                organization_id: auth0_organization.my_organization.id
              dependencies:
                auth0_client.my_test_client: |-
                    {
                      "default_organization": [
                        {
                          "flows": [
                            "client_credentials"
                          ],
                          "organization_id": "${auth0_organization.my_organization.id}"
                        }
                      ],
                      "depends_on": [
                        "${auth0_organization.my_organization}",
                        "${auth0_resource_server.new_resource_server}"
                      ],
                      "name": "test_client",
                      "organization_usage": "allow"
                    }
                auth0_client_grant.my_client_grant: |-
                    {
                      "allow_any_organization": true,
                      "audience": "${auth0_resource_server.new_resource_server.identifier}",
                      "client_id": "${auth0_client.my_test_client.id}",
                      "depends_on": [
                        "${auth0_resource_server.new_resource_server}",
                        "${auth0_client.my_test_client}"
                      ],
                      "organization_usage": "allow",
                      "scopes": [
                        "create:organization_client_grants",
                        "create:resource"
                      ]
                    }
                auth0_organization.my_organization: |-
                    {
                      "display_name": "Test Org Acceptance Testing",
                      "name": "test-org-acceptance-testing"
                    }
                auth0_resource_server.new_resource_server: |-
                    {
                      "identifier": "https://api.travel00123.com/",
                      "name": "Example API"
                    }
        argumentDocs:
            grant_id: (String) A Client Grant ID to add to the organization.
            id: (String) The ID of this resource.
            organization_id: (String) The ID of the organization to associate the client grant.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # organization ID and client grant ID separated by "::" (note the double colon)
              # <organizationID>::<clientGrantID>
              #
              # Example:
              terraform import auth0_organization_client_grant.my_org_client_grant "org_XXXXX::cgr_XXXXX"
    auth0_organization_connection:
        subCategory: ""
        description: With this resource, you can manage enabled connections on an organization.
        name: auth0_organization_connection
        title: auth0_organization_connection
        examples:
            - name: my_org_conn
              manifest: |-
                {
                  "assign_membership_on_login": true,
                  "connection_id": "${auth0_connection.my_connection.id}",
                  "is_signup_enabled": false,
                  "organization_id": "${auth0_organization.my_organization.id}",
                  "show_as_button": true
                }
              references:
                connection_id: auth0_connection.my_connection.id
                organization_id: auth0_organization.my_organization.id
              dependencies:
                auth0_connection.my_connection: |-
                    {
                      "name": "My Connection",
                      "strategy": "auth0"
                    }
                auth0_organization.my_organization: |-
                    {
                      "display_name": "My Organization",
                      "name": "my-organization"
                    }
        argumentDocs:
            assign_membership_on_login: (Boolean) When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
            connection_id: (String) The ID of the connection to enable for the organization.
            id: (String) The ID of this resource.
            is_signup_enabled: '(Boolean) Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: is_signup_enabled can only be true if assign_membership_on_login is true.'
            name: (String) The name of the enabled connection.
            organization_id: (String) The ID of the organization to enable the connection for.
            show_as_button: (Boolean) Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
            strategy: (String) The strategy of the enabled connection.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # organization ID and connection ID separated by "::" (note the double colon)
              # <organizationID>::<connectionID>
              #
              # Example:
              terraform import auth0_organization_connection.my_org_conn "org_XXXXX::con_XXXXX"
    auth0_organization_connections:
        subCategory: ""
        description: With this resource, you can manage enabled connections on an organization.
        name: auth0_organization_connections
        title: auth0_organization_connections
        examples:
            - name: one-to-many
              manifest: |-
                {
                  "enabled_connections": [
                    {
                      "assign_membership_on_login": true,
                      "connection_id": "${auth0_connection.my_connection-1.id}",
                      "is_signup_enabled": false,
                      "show_as_button": true
                    },
                    {
                      "assign_membership_on_login": true,
                      "connection_id": "${auth0_connection.my_connection-2.id}",
                      "is_signup_enabled": false,
                      "show_as_button": true
                    }
                  ],
                  "organization_id": "${auth0_organization.my_organization.id}"
                }
              references:
                enabled_connections.connection_id: auth0_connection.my_connection-2.id
                organization_id: auth0_organization.my_organization.id
              dependencies:
                auth0_connection.my_connection-1: |-
                    {
                      "name": "My Connection 1",
                      "strategy": "auth0"
                    }
                auth0_connection.my_connection-2: |-
                    {
                      "name": "My Connection 2",
                      "strategy": "auth0"
                    }
                auth0_organization.my_organization: |-
                    {
                      "display_name": "My Organization",
                      "name": "my-organization"
                    }
        argumentDocs:
            assign_membership_on_login: (Boolean) When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
            connection_id: (String) The ID of the connection to enable for the organization.
            enabled_connections: '(Block Set, Min: 1) Connections that are enabled for the organization. (see below for nested schema)'
            id: (String) The ID of this resource.
            is_signup_enabled: '(Boolean) Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: is_signup_enabled can only be true if assign_membership_on_login is true.'
            organization_id: (String) ID of the organization on which to enable the connections.
            show_as_button: (Boolean) Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
        importStatements:
            - |-
              # This resource can be imported by specifying the organization ID.
              #
              # Example:
              terraform import auth0_organization_connections.my_org_conns "org_XXXXX"
    auth0_organization_member:
        subCategory: ""
        description: This resource is used to manage the assignment of members and their roles within an organization.
        name: auth0_organization_member
        title: auth0_organization_member
        examples:
            - name: my_org_member
              manifest: |-
                {
                  "organization_id": "${auth0_organization.my_org.id}",
                  "user_id": "${auth0_user.user.id}"
                }
              references:
                organization_id: auth0_organization.my_org.id
                user_id: auth0_user.user.id
              dependencies:
                auth0_organization.my_org: |-
                    {
                      "display_name": "Admin",
                      "name": "org-admin"
                    }
                auth0_user.user: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "test-user@auth0.com",
                      "email_verified": true,
                      "password": "MyPass123$"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            organization_id: (String) The ID of the organization to assign the member to.
            user_id: (String) ID of the user to add as an organization member.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # organization ID and user ID separated by "::" (note the double colon)
              # <organizationID>::<userID>
              #
              # Example:
              terraform import auth0_organization_member.my_org_member "org_XXXXX::auth0|XXXXX"
    auth0_organization_member_role:
        subCategory: ""
        description: This resource is used to manage the roles assigned to an organization member.
        name: auth0_organization_member_role
        title: auth0_organization_member_role
        examples:
            - name: role1
              manifest: |-
                {
                  "organization_id": "${auth0_organization.my_org.id}",
                  "role_id": "${auth0_role.reader.id}",
                  "user_id": "${auth0_user.user.id}"
                }
              references:
                organization_id: auth0_organization.my_org.id
                role_id: auth0_role.reader.id
                user_id: auth0_user.user.id
              dependencies:
                auth0_organization.my_org: |-
                    {
                      "display_name": "Some Org",
                      "name": "some-org"
                    }
                auth0_organization_member.my_org_member: |-
                    {
                      "organization_id": "${auth0_organization.my_org.id}",
                      "user_id": "${auth0_user.user.id}"
                    }
                auth0_role.reader: |-
                    {
                      "name": "Reader"
                    }
                auth0_role.writer: |-
                    {
                      "name": "Writer"
                    }
                auth0_user.user: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "test-user@auth0.com",
                      "password": "MyPass123$"
                    }
            - name: role2
              manifest: |-
                {
                  "organization_id": "${auth0_organization.my_org.id}",
                  "role_id": "${auth0_role.writer.id}",
                  "user_id": "${auth0_user.user.id}"
                }
              references:
                organization_id: auth0_organization.my_org.id
                role_id: auth0_role.writer.id
                user_id: auth0_user.user.id
              dependencies:
                auth0_organization.my_org: |-
                    {
                      "display_name": "Some Org",
                      "name": "some-org"
                    }
                auth0_organization_member.my_org_member: |-
                    {
                      "organization_id": "${auth0_organization.my_org.id}",
                      "user_id": "${auth0_user.user.id}"
                    }
                auth0_role.reader: |-
                    {
                      "name": "Reader"
                    }
                auth0_role.writer: |-
                    {
                      "name": "Writer"
                    }
                auth0_user.user: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "test-user@auth0.com",
                      "password": "MyPass123$"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            organization_id: (String) The ID of the organization.
            role_description: (String) Description of the role.
            role_id: (String) The role ID to assign to the organization member.
            role_name: (String) Name of the role.
            user_id: (String) The user ID of the organization member.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # organization ID, user ID and role ID separated by "::" (note the double colon)
              # <organizationID>::<userID>::<roleID>
              #
              # Example:
              terraform import auth0_organization_member_role.my_org_member_role "org_XXXXX::auth0|XXXXX::role_XXXX"
    auth0_organization_member_roles:
        subCategory: ""
        description: This resource is used to manage the roles assigned to an organization member.
        name: auth0_organization_member_roles
        title: auth0_organization_member_roles
        examples:
            - name: my_org_member_roles
              manifest: |-
                {
                  "organization_id": "${auth0_organization.my_org.id}",
                  "roles": [
                    "${auth0_role.reader.id}",
                    "${auth0_role.writer.id}"
                  ],
                  "user_id": "${auth0_user.user.id}"
                }
              references:
                organization_id: auth0_organization.my_org.id
                user_id: auth0_user.user.id
              dependencies:
                auth0_organization.my_org: |-
                    {
                      "display_name": "Some Org",
                      "name": "some-org"
                    }
                auth0_organization_member.my_org_member: |-
                    {
                      "organization_id": "${auth0_organization.my_org.id}",
                      "user_id": "${auth0_user.user.id}"
                    }
                auth0_role.reader: |-
                    {
                      "name": "Reader"
                    }
                auth0_role.writer: |-
                    {
                      "name": "Writer"
                    }
                auth0_user.user: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "test-user@auth0.com",
                      "password": "MyPass123$"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            organization_id: (String) The ID of the organization.
            roles: (Set of String) The role ID(s) to assign to the organization member.
            user_id: (String) The user ID of the organization member.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # organization ID and user ID separated by "::" (note the double colon)
              # <organizationID>::<userID>
              #
              # Example:
              terraform import auth0_organization_member_roles.my_org_member_roles "org_XXXXX::auth0|XXXXX"
    auth0_organization_members:
        subCategory: ""
        description: This resource is used to manage members of an organization.
        name: auth0_organization_members
        title: auth0_organization_members
        examples:
            - name: my_members
              manifest: |-
                {
                  "members": [
                    "${auth0_user.user_1.id}",
                    "${auth0_user.user_2.id}"
                  ],
                  "organization_id": "${auth0_organization.my_org.id}"
                }
              references:
                organization_id: auth0_organization.my_org.id
              dependencies:
                auth0_organization.my_org: |-
                    {
                      "display_name": "Some Organization",
                      "name": "some-org"
                    }
                auth0_user.user_1: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "myuser1@auth0.com",
                      "password": "MyPass123$"
                    }
                auth0_user.user_2: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "myuser2@auth0.com",
                      "password": "MyPass123$"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            members: (Set of String) Add user ID(s) directly from the tenant to become members of the organization.
            organization_id: (String) The ID of the organization to assign the members to.
        importStatements:
            - |-
              # This resource can be imported by specifying the organization ID.
              #
              # Example:
              terraform import auth0_organization_members.my_org_members "org_XXXXX"
    auth0_pages:
        subCategory: ""
        description: With this resource you can manage custom HTML for the Login, Reset Password, Multi-Factor Authentication and Error pages.
        name: auth0_pages
        title: auth0_pages
        examples:
            - name: my_pages
              manifest: |-
                {
                  "change_password": [
                    {
                      "enabled": true,
                      "html": "\u003chtml\u003e\u003cbody\u003eMy Custom Reset Password Page\u003c/body\u003e\u003c/html\u003e"
                    }
                  ],
                  "error": [
                    {
                      "html": "\u003chtml\u003e\u003cbody\u003eMy Custom Error Page\u003c/body\u003e\u003c/html\u003e",
                      "show_log_link": true,
                      "url": "https://example.com"
                    }
                  ],
                  "guardian_mfa": [
                    {
                      "enabled": true,
                      "html": "\u003chtml\u003e\u003cbody\u003eMy Custom MFA Page\u003c/body\u003e\u003c/html\u003e"
                    }
                  ],
                  "login": [
                    {
                      "enabled": true,
                      "html": "\u003chtml\u003e\u003cbody\u003eMy Custom Login Page\u003c/body\u003e\u003c/html\u003e"
                    }
                  ]
                }
        argumentDocs:
            change_password: '(Block List, Max: 1) Configuration settings for customizing the Password Reset page. (see below for nested schema)'
            enabled: (Boolean) Indicates whether to use the custom Reset Password HTML (true) or the default Auth0 page (false).
            error: '(Block List, Max: 1) Configuration settings for the Error pages. (see below for nested schema)'
            guardian_mfa: '(Block List, Max: 1) Configuration settings for customizing the Guardian Multi-Factor Authentication page. (see below for nested schema)'
            html: (String) Customized content for the Reset Password page. HTML format with supported Liquid syntax.
            id: (String) The ID of this resource.
            login: '(Block List, Max: 1) Configuration settings for customizing the Login page. (see below for nested schema)'
            show_log_link: (Boolean) Indicates whether to show the link to logs as part of the default error page.
            url: (String) URL to redirect to when an error occurs, instead of showing the default error page.
        importStatements:
            - |-
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # pages can be imported using a random string.
              #
              # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
              #
              # Example:
              terraform import auth0_pages.my_pages "22f4f21b-017a-319d-92e7-2291c1ca36c4"
    auth0_phone_provider:
        subCategory: ""
        description: Auth0 allows you to configure your own phone messaging provider to help you manage, monitor, and troubleshoot your SMS and voice communications. You can only configure one phone provider for all SMS and voice communications per tenant.
        name: auth0_phone_provider
        title: auth0_phone_provider
        examples:
            - name: twilio_phone_provider
              manifest: |-
                {
                  "configuration": [
                    {
                      "default_from": "+1234567890",
                      "delivery_methods": [
                        "text",
                        "voice"
                      ],
                      "mssid": "MSXXXXXXXXXXXXXXXX",
                      "sid": "ACXXXXXXXXXXXXXXXX"
                    }
                  ],
                  "credentials": [
                    {
                      "auth_token": "secretAuthToken"
                    }
                  ],
                  "disabled": false,
                  "name": "twilio"
                }
              dependencies:
                auth0_action.send_custom_phone: |-
                    {
                      "code": "/**\n * Handler to be executed while sending a phone notification\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {CustomPhoneProviderAPI} api - Methods and utilities to help change the behavior of sending a phone notification.\n */\nexports.onExecuteCustomPhoneProvider = async (event, api) =\u003e {\n    // Code goes here\n    return;\n};\n",
                      "deploy": true,
                      "name": "Custom Phone Provider",
                      "runtime": "node18",
                      "supported_triggers": [
                        {
                          "id": "custom-phone-provider",
                          "version": "v1"
                        }
                      ]
                    }
            - name: custom_phone_provider
              manifest: |-
                {
                  "configuration": [
                    {
                      "delivery_methods": [
                        "text",
                        "voice"
                      ]
                    }
                  ],
                  "credentials": [
                    {}
                  ],
                  "depends_on": [
                    "${auth0_action.send_custom_phone}"
                  ],
                  "disabled": false,
                  "name": "custom"
                }
              dependencies:
                auth0_action.send_custom_phone: |-
                    {
                      "code": "/**\n * Handler to be executed while sending a phone notification\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {CustomPhoneProviderAPI} api - Methods and utilities to help change the behavior of sending a phone notification.\n */\nexports.onExecuteCustomPhoneProvider = async (event, api) =\u003e {\n    // Code goes here\n    return;\n};\n",
                      "deploy": true,
                      "name": "Custom Phone Provider",
                      "runtime": "node18",
                      "supported_triggers": [
                        {
                          "id": "custom-phone-provider",
                          "version": "v1"
                        }
                      ]
                    }
        argumentDocs:
            auth_token: (String, Sensitive) The Auth Token for the phone provider.
            channel: (String) The channel of the phone provider.
            configuration: '(Block List, Min: 1, Max: 1) Specific phone provider settings. (see below for nested schema)'
            credentials: '(Block List, Min: 1, Max: 1) Provider credentials required to use authenticate to the provider. (see below for nested schema)'
            default_from: (String) Default sender subject as "from" when no other value is specified.
            delivery_methods: (Set of String) Media set supported by a given provider to deliver a notification
            disabled: (Boolean) Indicates whether the phone provider is enabled (false) or disabled (true).
            id: (String) The ID of this resource.
            mssid: (String) Twilio Messaging Service SID
            name: (String) Name of the phone provider. Options include twilio, custom.
            sid: (String) Twilio Account SID.
            tenant: (String) The tenant of the phone provider.
        importStatements:
            - |-
              # This resource can be imported by specifying the phone Provider ID.
              #
              # Example:
              terraform import auth0_phone_provider.my_phone_provider "pro_XXXXXXXXXXXXXXXX"
    auth0_prompt:
        subCategory: ""
        description: With this resource, you can manage your Auth0 prompts, including choosing the login experience version.
        name: auth0_prompt
        title: auth0_prompt
        examples:
            - name: my_prompt
              manifest: |-
                {
                  "identifier_first": false,
                  "universal_login_experience": "new",
                  "webauthn_platform_first_factor": true
                }
        argumentDocs:
            id: (String) The ID of this resource.
            identifier_first: (Boolean) Indicates whether the identifier first is used when using the new Universal Login experience.
            universal_login_experience: (String) Which login experience to use. Options include classic and new.
            webauthn_platform_first_factor: (Boolean) Determines if the login screen uses identifier and biometrics first. Setting this property to true, requires MFA factors enabled for enrollment; use the auth0_guardian resource to set one up.
        importStatements:
            - |-
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # prompts can be imported using a random string.
              #
              # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
              #
              # Example:
              terraform import auth0_prompt.my_prompt "22f4f21b-017a-319d-92e7-2291c1ca36c4"
    auth0_prompt_custom_text:
        subCategory: ""
        description: With this resource, you can manage custom text on your Auth0 prompts. You can read more about custom texts here https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts.
        name: auth0_prompt_custom_text
        title: auth0_prompt_custom_text
        examples:
            - name: example
              manifest: |-
                {
                  "body": "${jsonencode(\n    {\n      \"login\" : {\n        \"alertListTitle\" : \"Alerts\",\n        \"buttonText\" : \"Continue\",\n        \"description\" : \"Login to\",\n        \"editEmailText\" : \"Edit\",\n        \"emailPlaceholder\" : \"Email address\",\n        \"federatedConnectionButtonText\" : \"Continue with $${connectionName}\",\n        \"footerLinkText\" : \"Sign up\",\n        \"footerText\" : \"Don't have an account?\",\n        \"forgotPasswordText\" : \"Forgot password?\",\n        \"invitationDescription\" : \"Log in to accept $${inviterName}'s invitation to join $${companyName} on $${clientName}.\",\n        \"invitationTitle\" : \"You've Been Invited!\",\n        \"logoAltText\" : \"$${companyName}\",\n        \"pageTitle\" : \"Log in | $${clientName}\",\n        \"passwordPlaceholder\" : \"Password\",\n        \"separatorText\" : \"Or\",\n        \"signupActionLinkText\" : \"$${footerLinkText}\",\n        \"signupActionText\" : \"$${footerText}\",\n        \"title\" : \"Welcome\",\n        \"usernamePlaceholder\" : \"Username or email address\"\n      }\n    }\n  )}",
                  "language": "en",
                  "prompt": "login"
                }
        argumentDocs:
            body: (String) JSON containing the custom texts. You can check the options for each prompt here.
            id: (String) The ID of this resource.
            language: '(String) Language of the custom text. Options include: am, ar, ar-EG, ar-SA, az, bg, bn, bs, ca-ES, cnr, cs, cy, da, de, el, en, en-CA, es, es-419, es-AR, es-MX, et, eu-ES, fa, fi, fr, fr-CA, fr-FR, gl-ES, gu, he, hi, hr, hu, hy, id, is, it, ja, ka, kk, kn, ko, lt, lv, mk, ml, mn, mr, ms, my, nb, nl, nn, no, pa, pl, pt, pt-BR, pt-PT, ro, ru, sk, sl, so, sq, sr, sv, sw, ta, te, th, tl, tr, uk, ur, vi, zgh, zh-CN, zh-HK, zh-TW.'
            prompt: '(String) The term prompt is used to refer to a specific step in the login flow. Options include: login, login-id, login-password, login-passwordless, login-email-verification, signup, signup-id, signup-password, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, reset-password, custom-form, consent, customized-consent, logout, mfa-push, mfa-otp, mfa-voice, mfa-phone, mfa-webauthn, mfa-sms, mfa-email, mfa-recovery-code, mfa, status, device-flow, email-verification, email-otp-challenge, organizations, invitation, common, passkeys, captcha, brute-force-protection.'
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # prompt and language separated by "::" (note the double colon)
              # <prompt>::<language>
              #
              # Example
              terraform import auth0_prompt_custom_text.example "login::en"
    auth0_prompt_partials:
        subCategory: ""
        description: With this resource, you can manage a customized sign up and login experience by adding custom content, form elements and css/javascript. You can read more about this here https://auth0.com/docs/customize/universal-login-pages/customize-signup-and-login-prompts.
        name: auth0_prompt_partials
        title: auth0_prompt_partials
        examples:
            - name: my_login_prompt_partials
              manifest: |-
                {
                  "form_content_end": "\u003cdiv\u003eUpdated Form Content End\u003c/div\u003e",
                  "form_content_start": "\u003cdiv\u003eUpdated Form Content Start\u003c/div\u003e",
                  "form_footer_end": "\u003cdiv\u003eUpdated Footer End\u003c/div\u003e",
                  "form_footer_start": "\u003cdiv\u003eUpdated Footer Start\u003c/div\u003e",
                  "prompt": "login",
                  "secondary_actions_end": "\u003cdiv\u003eUpdated Secondary Actions End\u003c/div\u003e",
                  "secondary_actions_start": "\u003cdiv\u003eUpdated Secondary Actions Start\u003c/div\u003e"
                }
        argumentDocs:
            form_content_end: (String, Deprecated) Content that goes at the end of the form.
            form_content_start: (String, Deprecated) Content that goes at the start of the form.
            form_footer_end: (String, Deprecated) Footer content for the end of the footer.
            form_footer_start: (String, Deprecated) Footer content for the start of the footer.
            id: (String) The ID of this resource.
            prompt: '(String, Deprecated) The prompt that you are adding partials for. Options are: login-id, login, login-password, signup, signup-id, signup-password, login-passwordless, customized-consent.'
            secondary_actions_end: (String, Deprecated) Actions that go at the end of secondary actions.
            secondary_actions_start: (String, Deprecated) Actions that go at the start of secondary actions.
        importStatements:
            - |-
              # This resource can be imported using the prompt name.
              #
              # Example:
              terraform import auth0_prompt_partials.my_login_prompt_partials "login"
    auth0_prompt_screen_partial:
        subCategory: ""
        description: With this resource, you can manage a customized sign up and login experience by adding custom content, form elements and css/javascript. You can read more about this here https://auth0.com/docs/customize/universal-login-pages/customize-signup-and-login-prompts.
        name: auth0_prompt_screen_partial
        title: auth0_prompt_screen_partial
        examples:
            - name: login
              manifest: |-
                {
                  "insertion_points": [
                    {
                      "form_content_end": "\u003cdiv\u003eForm Content End\u003c/div\u003e",
                      "form_content_start": "\u003cdiv\u003eForm Content Start\u003c/div\u003e"
                    }
                  ],
                  "prompt_type": "login",
                  "screen_name": "login"
                }
            - name: customized-consent
              manifest: |-
                {
                  "insertion_points": [
                    {
                      "form_content": "\u003cdiv\u003eForm Content\u003c/div\u003e"
                    }
                  ],
                  "prompt_type": "customized-consent",
                  "screen_name": "customized-consent"
                }
        argumentDocs:
            form_content: (String) Content that goes inside the form
            form_content_end: (String) Content that goes at the end of the form.
            form_content_start: (String) Content that goes at the start of the form.
            form_footer_end: (String) Footer content for the end of the footer.
            form_footer_start: (String) Footer content for the start of the footer.
            id: (String) The ID of this resource.
            insertion_points: '(Block List, Max: 1) The insertion points for the partials. (see below for nested schema)'
            prompt_type: '(String) The prompt that you are adding partials for. Options are: login-id, login, login-password, signup, signup-id, signup-password, login-passwordless, customized-consent.'
            screen_name: (String) The name of the screen associated with the partials
            secondary_actions_end: (String) Actions that go at the end of secondary actions.
            secondary_actions_start: (String) Actions that go at the start of secondary actions.
        importStatements:
            - |-
              # This resource can be imported using the prompt name and screen_name.
              #
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # login can be imported using the prompt name and screen name using the format:
              # prompt_name:screen_name
              #
              # Example:
              terraform import auth0_prompt_screen_partial.login "login:login"
    auth0_prompt_screen_partials:
        subCategory: ""
        description: With this resource, you can manage a customized sign up and login experience by adding custom content, form elements and css/javascript. You can read more about this here https://auth0.com/docs/customize/universal-login-pages/customize-signup-and-login-prompts.
        name: auth0_prompt_screen_partials
        title: auth0_prompt_screen_partials
        examples:
            - name: prompt_screen_partials
              manifest: |-
                {
                  "prompt_type": "login-passwordless",
                  "screen_partials": [
                    {
                      "insertion_points": [
                        {
                          "form_content_end": "\u003cdiv\u003eForm Content End\u003c/div\u003e",
                          "form_content_start": "\u003cdiv\u003eForm Content Start\u003c/div\u003e"
                        }
                      ],
                      "screen_name": "login-passwordless-email-code"
                    },
                    {
                      "insertion_points": [
                        {
                          "form_content_end": "\u003cdiv\u003eForm Content End\u003c/div\u003e",
                          "form_content_start": "\u003cdiv\u003eForm Content Start\u003c/div\u003e"
                        }
                      ],
                      "screen_name": "login-passwordless-sms-otp"
                    }
                  ]
                }
            - name: customized-consent
              manifest: |-
                {
                  "prompt_type": "customized-consent",
                  "screen_partials": [
                    {
                      "insertion_points": [
                        {
                          "form_content": "\u003cdiv\u003eForm Content\u003c/div\u003e"
                        }
                      ],
                      "screen_name": "customized-consent"
                    }
                  ]
                }
        argumentDocs:
            form_content: (String) Content that goes inside the form
            form_content_end: (String) Content that goes at the end of the form.
            form_content_start: (String) Content that goes at the start of the form.
            form_footer_end: (String) Footer content for the end of the footer.
            form_footer_start: (String) Footer content for the start of the footer.
            id: (String) The ID of this resource.
            insertion_points: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
            prompt_type: '(String) The prompt that you are adding partials for. Options are: login-id, login, login-password, signup, signup-id, signup-password, login-passwordless, customized-consent.'
            screen_name: (String) The name of the screen associated with the partials
            screen_partials: (Block List) (see below for nested schema)
            secondary_actions_end: (String) Actions that go at the end of secondary actions.
            secondary_actions_start: (String) Actions that go at the start of secondary actions.
        importStatements:
            - |-
              # This resource can be imported using the prompt name.
              #
              # Example:
              terraform import auth0_prompt_screen_partials.prompt_screen_partials "login-passwordless"
    auth0_prompt_screen_renderer:
        subCategory: ""
        description: With this resource, you can Configure the render settings for a specific screen.You can read more about this here https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens.
        name: auth0_prompt_screen_renderer
        title: auth0_prompt_screen_renderer
        examples:
            - name: prompt_screen_renderer
              manifest: |-
                {
                  "context_configuration": [
                    "branding.settings",
                    "branding.themes.default",
                    "client.logo_uri",
                    "client.description",
                    "client.metadata.key",
                    "organization.display_name",
                    "organization.branding",
                    "organization.metadata.key",
                    "screen.texts",
                    "tenant.name",
                    "tenant.friendly_name",
                    "tenant.enabled_locales",
                    "untrusted_data.submitted_form_data",
                    "untrusted_data.authorization_params.login_hint",
                    "untrusted_data.authorization_params.screen_hint",
                    "untrusted_data.authorization_params.ui_locales",
                    "untrusted_data.authorization_params.ext-key"
                  ],
                  "default_head_tags_disabled": false,
                  "head_tags": "${jsonencode([\n    {\n      attributes : {\n        \"async\" : true,\n        \"defer\" : true,\n        \"integrity\" : [\n          \"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\"\n        ],\n        \"src\" : \"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"\n      },\n      tag : \"script\"\n    }\n  ])}",
                  "prompt_type": "login-id",
                  "rendering_mode": "advanced",
                  "screen_name": "login-id"
                }
        argumentDocs:
            clients: '(String) An array of clients (applications) identified by id or a metadata key/value pair. Entity Limit: 25.'
            context_configuration: (Set of String) Context values to make available
            default_head_tags_disabled: (Boolean) Override Universal Login default head tags
            domains: '(String) An array of domains identified by id or a metadata key/value pair. Entity Limit: 25.'
            filters: '(Block List, Max: 1) Optional filters to apply rendering rules to specific entities. match_type and at least one of the entity arrays are required. (see below for nested schema)'
            head_tags: (String) An array of head tags
            id: (String) The ID of this resource.
            match_type: '(String) Type of match to apply. Options: includes_any, excludes_any.'
            organizations: '(String) An array of organizations identified by id or a metadata key/value pair. Entity Limit: 25.'
            prompt_type: '(String) The prompt that you are configuring settings for. Options are: signup-id, signup-password, login-id, login-password, login-passwordless, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, passkeys, captcha, login, signup, reset-password, mfa, mfa-sms, mfa-email, mfa-push, invitation, organizations, mfa-otp, device-flow, mfa-phone, mfa-voice, mfa-recovery-code, common, email-verification, login-email-verification, logout, mfa-webauthn, consent, customized-consent, email-otp-challenge.'
            rendering_mode: '(String) Rendering modeOptions are: standard, advanced.'
            screen_name: '(String) The screen that you are configuring settings for. Options are: signup-id, signup-password, login-id, login-password, login-passwordless-sms-otp, login-passwordless-email-code, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, passkey-enrollment, passkey-enrollment-local, interstitial-captcha, login, signup, reset-password-request, reset-password-email, reset-password, reset-password-success, reset-password-error, reset-password-mfa-email-challenge, reset-password-mfa-otp-challenge, reset-password-mfa-push-challenge-push, reset-password-mfa-sms-challenge, mfa-detect-browser-capabilities, mfa-enroll-result, mfa-begin-enroll-options, mfa-login-options, mfa-country-codes, mfa-sms-challenge, mfa-sms-enrollment, mfa-sms-list, mfa-email-challenge, mfa-email-list, mfa-push-challenge-push, mfa-push-enrollment-qr, mfa-push-list, mfa-push-welcome, accept-invitation, organization-selection, organization-picker, mfa-otp-challenge, mfa-otp-enrollment-code, mfa-otp-enrollment-qr, device-code-activation, device-code-activation-allowed, device-code-activation-denied, device-code-confirmation, mfa-phone-challenge, mfa-phone-enrollment, mfa-voice-challenge, mfa-voice-enrollment, reset-password-mfa-phone-challenge, reset-password-mfa-voice-challenge, mfa-recovery-code-challenge, mfa-recovery-code-enrollment, reset-password-mfa-recovery-code-challenge, redeem-ticket, mfa-recovery-code-challenge-new-code, email-verification-result, login-email-verification, logout, logout-aborted, logout-complete, mfa-webauthn-change-key-nickname, mfa-webauthn-enrollment-success, mfa-webauthn-error, mfa-webauthn-platform-challenge, mfa-webauthn-platform-enrollment, mfa-webauthn-roaming-challenge, mfa-webauthn-roaming-enrollment, reset-password-mfa-webauthn-platform-challenge, reset-password-mfa-webauthn-roaming-challenge, consent, customized-consent, email-otp-challenge, mfa-webauthn-not-available-error.'
            tenant: (String) Tenant ID
            use_page_template: (Boolean) Use page template with ACUL
        importStatements:
            - |-
              # This resource can be imported using the prompt name and screen_name.
              #
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # login can be imported using the prompt name and screen name using the format:
              # prompt_name:screen_name
              #
              # Example:
              terraform import auth0_prompt_screen_renderer "login-id:login-id"
    auth0_resource_server:
        subCategory: ""
        description: With this resource, you can set up APIs that can be consumed from your authorized applications.
        name: auth0_resource_server
        title: auth0_resource_server
        examples:
            - name: my_resource_server
              manifest: |-
                {
                  "allow_offline_access": true,
                  "authorization_details": [
                    {
                      "type": "payment"
                    },
                    {
                      "type": "non-payment"
                    }
                  ],
                  "consent_policy": "transactional-authorization-with-mfa",
                  "identifier": "https://api.example.com",
                  "name": "Example Resource Server (Managed by Terraform)",
                  "proof_of_possession": [
                    {
                      "mechanism": "mtls",
                      "required": true
                    }
                  ],
                  "signing_alg": "RS256",
                  "skip_consent_for_verifiable_first_party_clients": true,
                  "token_encryption": [
                    {
                      "encryption_key": [
                        {
                          "algorithm": "RSA-OAEP-256",
                          "name": "keyname",
                          "pem": "-----BEGIN CERTIFICATE-----\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n-----END CERTIFICATE-----\n"
                        }
                      ],
                      "format": "compact-nested-jwe"
                    }
                  ],
                  "token_lifetime": 8600
                }
        argumentDocs:
            algorithm: (String) Algorithm used to encrypt the token.
            allow_offline_access: (Boolean) Indicates whether refresh tokens can be issued for this resource server.
            authorization_details: (Block List) Authorization details for this resource server. (see below for nested schema)
            consent_policy: (String) Consent policy for this resource server. Options include transactional-authorization-with-mfa, or null to disable.
            disable: (Boolean) Disable authorization details.
            encryption_key: '(Block List, Max: 1) Authorization details for this resource server. (see below for nested schema)'
            enforce_policies: (Boolean) If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.
            format: (String) Format of the token encryption. Only compact-nested-jwe is supported.
            id: (String) The ID of this resource.
            identifier: (String) Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.
            kid: (String) Key ID.
            mechanism: (String) Mechanism used for proof-of-possession. mtls or dpop is supported.
            name: (String) Friendly name for the resource server. Cannot include < or > characters.
            pem: (String) PEM-formatted public key. Must be JSON escaped.
            proof_of_possession: '(Block List, Max: 1) Configuration settings for proof-of-possession for this resource server. (see below for nested schema)'
            required: (Boolean) Indicates whether proof-of-possession is required with this resource server.
            signing_alg: (String) Algorithm used to sign JWTs. Options include HS256, RS256, and PS256.
            signing_secret: (String) Secret used to sign tokens when using symmetric algorithms (HS256).
            skip_consent_for_verifiable_first_party_clients: (Boolean) Indicates whether to skip user consent for applications flagged as first party.
            token_dialect: (String) Dialect of access tokens that should be issued for this resource server. Options include access_token, rfc9068_profile, access_token_authz, and rfc9068_profile_authz. access_token is a JWT containing standard Auth0 claims. rfc9068_profile is a JWT conforming to the IETF JWT Access Token Profile. access_token_authz is a JWT containing standard Auth0 claims, including RBAC permissions claims. rfc9068_profile_authz is a JWT conforming to the IETF JWT Access Token Profile, including RBAC permissions claims. RBAC permissions claims are available if RBAC (enforce_policies) is enabled for this API. For more details, refer to Access Token Profiles.
            token_encryption: '(Block List, Max: 1) Configuration for JSON Web Encryption(JWE) of tokens for this resource server. (see below for nested schema)'
            token_lifetime: (Number) Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.
            token_lifetime_for_web: (Number) Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the token_lifetime value.
            type: (String) Type of authorization details.
            verification_location: (String) URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.
        importStatements:
            - |-
              # Existing resource servers can be imported using their ID.
              #
              # Example:
              terraform import auth0_resource_server.my_resource_server "XXXXXXXXXXXXXXXXXXXXXXX"
    auth0_resource_server_scope:
        subCategory: ""
        description: With this resource, you can manage scopes (permissions) associated with a resource server (API).
        name: auth0_resource_server_scope
        title: auth0_resource_server_scope
        examples:
            - name: read_posts
              manifest: |-
                {
                  "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}",
                  "scope": "read:posts"
                }
              references:
                resource_server_identifier: auth0_resource_server.resource_server.identifier
              dependencies:
                auth0_resource_server.resource_server: |-
                    {
                      "identifier": "https://api.example.com",
                      "name": "Example Resource Server (Managed by Terraform)"
                    }
            - name: write_posts
              manifest: |-
                {
                  "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}",
                  "scope": "write:posts"
                }
              references:
                resource_server_identifier: auth0_resource_server.resource_server.identifier
              dependencies:
                auth0_resource_server.resource_server: |-
                    {
                      "identifier": "https://api.example.com",
                      "name": "Example Resource Server (Managed by Terraform)"
                    }
        argumentDocs:
            description: (String) Description of the scope (permission).
            id: (String) The ID of this resource.
            resource_server_identifier: (String) Identifier of the resource server that the scope (permission) is associated with.
            scope: (String) Name of the scope (permission).
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # resource identifier and scope name separated by "::" (note the double colon)
              # <resourceServerIdentifier>::<scope>

              #
              # Example:
              terraform import auth0_resource_server_scope.scope "https://api.travel0.com/v1::read:posts"
    auth0_resource_server_scopes:
        subCategory: ""
        description: With this resource, you can manage scopes (permissions) associated with a resource server (API).
        name: auth0_resource_server_scopes
        title: auth0_resource_server_scopes
        examples:
            - name: my_api_scopes
              manifest: |-
                {
                  "resource_server_identifier": "${auth0_resource_server.my_api.identifier}",
                  "scopes": [
                    {
                      "description": "Ability to create appointments",
                      "name": "create:appointments"
                    },
                    {
                      "description": "Ability to read appointments",
                      "name": "read:appointments"
                    }
                  ]
                }
              references:
                resource_server_identifier: auth0_resource_server.my_api.identifier
              dependencies:
                auth0_resource_server.my_api: |-
                    {
                      "identifier": "https://api.example.com",
                      "name": "Example Resource Server (Managed by Terraform)"
                    }
        argumentDocs:
            description: (String) User-friendly description of the scope (permission).
            id: (String) The ID of this resource.
            name: (String) Name of the scope (permission). Examples include read:appointments or delete:appointments.
            resource_server_identifier: (String) Identifier of the resource server that the scopes (permission) are associated with.
            scopes: '(Block Set, Min: 1) (see below for nested schema)'
        importStatements:
            - |-
              # This resource can be imported by specifying the resource server identifier.
              #
              # Example:
              terraform import auth0_resource_server_scopes.my_api_scopes "https://api.travel0.com/v1"
    auth0_risk_assessments:
        subCategory: ""
        description: Resource for managing general Risk Assessment settings.
        name: auth0_risk_assessments
        title: auth0_risk_assessments
        argumentDocs:
            enabled: (Boolean) Whether risk assessment is enabled or not.
            id: (String) The ID of this resource.
        importStatements: []
    auth0_risk_assessments_new_device:
        subCategory: ""
        description: Resource for managing Risk Assessment settings for new devices.
        name: auth0_risk_assessments_new_device
        title: auth0_risk_assessments_new_device
        argumentDocs:
            id: (String) The ID of this resource.
            remember_for: (Number) Length of time to remember devices for, in days
        importStatements: []
    auth0_role:
        subCategory: ""
        description: With this resource, you can create and manage collections of permissions that can be assigned to users, which are otherwise known as roles. Permissions (scopes) are created on auth0_resource_server, then associated with roles and optionally, users using this resource.
        name: auth0_role
        title: auth0_role
        examples:
            - name: my_role
              manifest: |-
                {
                  "description": "Role Description...",
                  "name": "My Role - (Managed by Terraform)"
                }
        argumentDocs:
            description: (String) The description of the role.
            id: (String) The ID of this resource.
            name: (String) The name of the role.
        importStatements:
            - |-
              # Existing roles can be imported using their ID.
              #
              # Example:
              terraform import auth0_role.my_role "XXXXXXXXXXXXXXXXXXXXXXX"
    auth0_role_permission:
        subCategory: ""
        description: With this resource, you can manage role permissions (1-1).
        name: auth0_role_permission
        title: auth0_role_permission
        examples:
            - name: my_role_perm
              manifest: |-
                {
                  "for_each": "${toset(local.scopesList)}",
                  "permission": "${each.value}",
                  "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}",
                  "role_id": "${auth0_role.my_role.id}"
                }
              references:
                permission: each.value
                resource_server_identifier: auth0_resource_server.resource_server.identifier
                role_id: auth0_role.my_role.id
              dependencies:
                auth0_resource_server.resource_server: |-
                    {
                      "identifier": "test.example.com",
                      "name": "test"
                    }
                auth0_resource_server_scopes.resource_server_scopes: |-
                    {
                      "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}",
                      "scopes": [
                        {
                          "name": "store:create"
                        },
                        {
                          "name": "store:read"
                        },
                        {
                          "name": "store:update"
                        },
                        {
                          "name": "store:delete"
                        }
                      ]
                    }
                auth0_role.my_role: |-
                    {
                      "name": "My Role"
                    }
        argumentDocs:
            description: (String) Description of the permission.
            id: (String) The ID of this resource.
            permission: (String) Name of the permission.
            resource_server_identifier: (String) Identifier of the resource server that the permission is associated with.
            resource_server_name: (String) Name of the resource server that the permission is associated with.
            role_id: (String) ID of the role to associate the permission to.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # role ID, resource identifier, and permission name separated by "::" (note the double colon)
              # <roleID>::<resourceServerIdentifier>::<permission>
              #
              # Example:
              terraform import auth0_role_permission.permission "rol_XXXXXXXXXXXXX::https://example.com::read:foo"
    auth0_role_permissions:
        subCategory: ""
        description: With this resource, you can manage role permissions (1-many).
        name: auth0_role_permissions
        title: auth0_role_permissions
        examples:
            - name: my_role_perms
              manifest: |-
                {
                  "dynamic": {
                    "permissions": [
                      {
                        "content": [
                          {
                            "name": "${permissions.value.name}",
                            "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}"
                          }
                        ],
                        "for_each": "${auth0_resource_server_scopes.resource_server_scopes.scopes}"
                      }
                    ]
                  },
                  "role_id": "${auth0_role.my_role.id}"
                }
              references:
                dynamic.content.name: permissions.value.name
                dynamic.content.resource_server_identifier: auth0_resource_server.resource_server.identifier
                dynamic.for_each: auth0_resource_server_scopes.resource_server_scopes.scopes
                role_id: auth0_role.my_role.id
              dependencies:
                auth0_resource_server.resource_server: |-
                    {
                      "identifier": "test.example.com",
                      "name": "test"
                    }
                auth0_resource_server_scopes.resource_server_scopes: |-
                    {
                      "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}",
                      "scopes": [
                        {
                          "name": "store:create"
                        },
                        {
                          "name": "store:read"
                        },
                        {
                          "name": "store:update"
                        },
                        {
                          "name": "store:delete"
                        }
                      ]
                    }
                auth0_role.my_role: |-
                    {
                      "name": "My Role"
                    }
        argumentDocs:
            description: (String) Description of the permission.
            id: (String) The ID of this resource.
            name: (String) Name of permission.
            permissions: '(Block Set, Min: 1) List of API permissions granted to the role. (see below for nested schema)'
            resource_server_identifier: (String) Resource server identifier associated with the permission.
            resource_server_name: (String) Name of resource server that the permission is associated with.
            role_id: (String) ID of the role to associate the permission to.
        importStatements:
            - |-
              # This resource can be imported by specifying the role ID
              #
              # Example:
              terraform import auth0_role_permissions.all_role_permissions "rol_XXXXXXXXXXXX"
    auth0_rule:
        subCategory: ""
        description: With Auth0, you can create custom Javascript snippets that run in a secure, isolated sandbox as part of your authentication pipeline, which are otherwise known as rules. This resource allows you to create and manage rules. You can create global variable for use with rules by using the auth0_rule_config resource. !> This resource is deprecated. Refer to the guide on how to migrate from rules to actions https://auth0.com/docs/customize/actions/migrate/migrate-from-rules-to-actions and manage your actions using the auth0_action resource.
        name: auth0_rule
        title: auth0_rule
        examples:
            - name: my_rule
              manifest: |-
                {
                  "enabled": true,
                  "name": "empty-rule",
                  "script": "    function (user, context, callback) {\n      callback(null, user, context);\n    }\n"
                }
        argumentDocs:
            enabled: (Boolean) Indicates whether the rule is enabled.
            id: (String) The ID of this resource.
            name: (String) Name of the rule. May only contain alphanumeric characters, spaces, and hyphens. May neither start nor end with hyphens or spaces.
            order: (Number) Order in which the rule executes relative to other rules. Lower-valued rules execute first.
            script: (String) Code to be executed when the rule runs.
        importStatements:
            - |-
              # Existing rules can be imported using their ID.
              #
              # Example:
              terraform import auth0_rule.my_rule "rul_XXXXXXXXXXXXX"
    auth0_rule_config:
        subCategory: ""
        description: With Auth0, you can create custom Javascript snippets that run in a secure, isolated sandbox as part of your authentication pipeline, which are otherwise known as rules. This resource allows you to create and manage variables that are available to all rules via Auth0's global configuration object. Used in conjunction with configured rules.
        name: auth0_rule_config
        title: auth0_rule_config
        examples:
            - name: my_rule_config
              manifest: |-
                {
                  "key": "foo",
                  "value": "bar"
                }
              dependencies:
                auth0_rule.my_rule: |-
                    {
                      "enabled": true,
                      "name": "empty-rule",
                      "script": "    function (user, context, callback) {\n      callback(null, user, context);\n    }\n"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String) Key for a rules configuration variable.
            value: (String, Sensitive) Value for a rules configuration variable.
        importStatements:
            - |-
              # Existing rule configs can be imported using their key name.
              #
              # Example:
              terraform import auth0_rule_config.my_rule_config "foo"
    auth0_self_service_profile:
        subCategory: ""
        description: With this resource, you can create and manage Self-Service Profile for a tenant.
        name: auth0_self_service_profile
        title: auth0_self_service_profile
        examples:
            - name: my_self_service_profile
              manifest: |-
                {
                  "branding": [
                    {
                      "colors": [
                        {
                          "primary": "#0059d6"
                        }
                      ],
                      "logo_url": "https://mycompany.org/v2/logo.png"
                    }
                  ],
                  "user_attributes": [
                    {
                      "description": "sample-description",
                      "is_optional": true,
                      "name": "sample-name"
                    }
                  ]
                }
        argumentDocs:
            allowed_strategies: (Set of String) List of IdP strategies that will be shown to users during the Self-Service SSO flow.
            branding: '(Block List, Max: 1) Field can be used to customize the look and feel of the wizard. (see below for nested schema)'
            colors: '(Block List, Max: 1) Configuration settings for colors for branding. (see below for nested schema)'
            created_at: (String) The ISO 8601 formatted date the profile was created.
            description: (String) The description of the self-service Profile
            id: (String) The ID of this resource.
            is_optional: (Boolean) Indicates if this attribute is optional or if it has to be provided by the customer for the application to function.
            logo_url: (String) URL of logo to display on login page.
            name: (String) The name of the self-service Profile
            primary: (String) Primary button background color in hexadecimal.
            updated_at: (String) The ISO 8601 formatted date the profile was updated.
            user_attributes: '(Block List, Max: 20) This array stores the mapping information that will be shown to the user during the SS-SSO flow. The user will be prompted to map the attributes on their identity provider to ensure the specified attributes get passed to Auth0. (see below for nested schema)'
        importStatements:
            - |-
              # This resource can be imported using the id
              # Example:
              terraform import auth0_self_service_profile.id "ssp_32oi5unksja93124"
    auth0_self_service_profile_custom_text:
        subCategory: ""
        description: With this resource, you can set custom text for Self-Service Profile
        name: auth0_self_service_profile_custom_text
        title: auth0_self_service_profile_custom_text
        examples:
            - name: sso_custom_text
              manifest: |-
                {
                  "body": "${jsonencode(\n    {\n      \"introduction\" : \"Welcome! With only a few steps you'll be able to setup your new custom text.\"\n    }\n  )}",
                  "language": "en",
                  "page": "get-started",
                  "sso_id": "some-sso-id"
                }
        argumentDocs:
            body: (String) The list of text keys and values to customize the self-service SSO page. Values can be plain text or rich HTML content limited to basic styling tags and hyperlinks
            id: (String) The ID of this resource.
            language: (String) The language of the custom text
            page: (String) The page where the custom text is shown
            sso_id: (String) The id of the self-service profile
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # sso-profile-id, language and page separated by "::" (note the double colon)
              # <sso-profile-id>::<language>::<page>
              #
              # Example
              terraform import auth0_self_service_profile_custom_text.example "some-sso-id::en::get-started"
    auth0_tenant:
        subCategory: ""
        description: With this resource, you can manage Auth0 tenants, including setting logos and support contact information, setting error pages, and configuring default tenant behaviors.
        name: auth0_tenant
        title: auth0_tenant
        examples:
            - name: my_tenant
              manifest: |-
                {
                  "allowed_logout_urls": [
                    "http://example.com/logout"
                  ],
                  "default_redirection_uri": "https://example.com/login",
                  "enabled_locales": [
                    "en"
                  ],
                  "error_page": [
                    {
                      "html": "\u003chtml\u003e\u003c/html\u003e",
                      "show_log_link": false,
                      "url": "https://example.com/error"
                    }
                  ],
                  "flags": [
                    {
                      "disable_clickjack_protection_headers": true,
                      "disable_fields_map_fix": false,
                      "disable_management_api_sms_obfuscation": false,
                      "enable_public_signup_user_exists_error": true,
                      "no_disclose_enterprise_connections": false,
                      "use_scope_descriptions_for_consent": true
                    }
                  ],
                  "friendly_name": "Tenant Name",
                  "picture_url": "http://example.com/logo.png",
                  "sandbox_version": "12",
                  "session_cookie": [
                    {
                      "mode": "non-persistent"
                    }
                  ],
                  "session_lifetime": 8760,
                  "sessions": [
                    {
                      "oidc_logout_prompt_enabled": false
                    }
                  ],
                  "support_email": "support@example.com",
                  "support_url": "http://example.com/support"
                }
        argumentDocs:
            acr_values_supported: (Set of String) List of supported ACR values.
            allow_legacy_delegation_grant_types: (Boolean) Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false).
            allow_legacy_ro_grant_types: (Boolean) Whether the legacy auth/ro endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false).
            allow_legacy_tokeninfo_endpoint: (Boolean) If enabled, customers can use Tokeninfo Endpoint, otherwise they can not use it.
            allow_organization_name_in_authentication_api: (Boolean) Whether to accept an organization name instead of an ID on auth endpoints.
            allowed_logout_urls: (List of String) URLs that Auth0 may redirect to after logout.
            client_credentials: '(Block List, Min: 1, Max: 1) The token quota configuration for client credentials. (see below for nested schema)'
            clients: '(Block List, Max: 1) The token quota configuration. (see below for nested schema)'
            customize_mfa_in_postlogin_action: (Boolean) Whether to enable flexible factors for MFA in the PostLogin action.
            dashboard_insights_view: (Boolean) Enables new insights activity page view.
            dashboard_log_streams_next: (Boolean) Enables beta access to log streaming changes.
            default_audience: (String) API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
            default_directory: (String) Name of the connection to be used for Password Grant exchanges. Options include auth0-adldap, ad, auth0, email, sms, waad, and adfs.
            default_redirection_uri: (String) The default absolute redirection URI. Must be HTTPS or an empty string.
            default_token_quota: '(Block List, Max: 1) Token Quota configuration. (see below for nested schema)'
            disable: (Boolean) Disable mTLS settings.
            disable_acr_values_supported: (Boolean) Disable list of supported ACR values.
            disable_clickjack_protection_headers: (Boolean) Indicates whether classic Universal Login prompts include additional security headers to prevent clickjacking.
            disable_fields_map_fix: (Boolean) Disables SAML fields map fix for bad mappings with repeated attributes.
            disable_management_api_sms_obfuscation: (Boolean) If true, SMS phone numbers will not be obfuscated in Management API GET calls.
            enable_adfs_waad_email_verification: (Boolean) If enabled, users will be presented with an email verification prompt during their first login when using Azure AD or ADFS connections.
            enable_apis_section: (Boolean) Indicates whether the APIs section is enabled for the tenant.
            enable_client_connections: (Boolean) Indicates whether all current connections should be enabled when a new client is created.
            enable_custom_domain_in_emails: '(Boolean) Indicates whether the tenant allows custom domains in emails. Before enabling this flag, you must have a custom domain with status: ready.'
            enable_dynamic_client_registration: (Boolean) Indicates whether the tenant allows dynamic client registration.
            enable_endpoint_aliases: (Boolean) Enable mTLS endpoint aliases.
            enable_idtoken_api2: (Boolean) Whether ID tokens can be used to authorize some types of requests to API v2 (true) or not (false).
            enable_legacy_logs_search_v2: (Boolean) Indicates whether to use the older v2 legacy logs search.
            enable_legacy_profile: (Boolean) Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).
            enable_pipeline2: (Boolean) Indicates whether advanced API Authorization scenarios are enabled.
            enable_public_signup_user_exists_error: (Boolean) Indicates whether the public sign up process shows a user_exists error if the user already exists.
            enable_sso: (Boolean) Flag indicating whether users will not be prompted to confirm log in before SSO redirection. This flag applies to existing tenants only; new tenants have it enforced as true.
            enabled_locales: (List of String) Supported locales for the user interface. The first locale in the list will be used to set the default locale.
            enforce: (Boolean) If enabled, the quota will be enforced and requests in excess of the quota will fail. If disabled, the quota will not be enforced, but notifications for requests exceeding the quota will be available in logs.
            error_page: '(Block List, Max: 1) Configuration for the error page (see below for nested schema)'
            flags: '(Block List, Max: 1) Configuration settings for tenant flags. (see below for nested schema)'
            friendly_name: (String) Friendly name for the tenant.
            html: (String) Custom Error HTML (Liquid syntax is supported)
            id: (String) The ID of this resource.
            idle_session_lifetime: (Number) Number of hours during which a session can be inactive before the user must log in again.
            mfa_show_factor_list_on_enrollment: (Boolean) Used to allow users to pick which factor to enroll with from the list of available MFA factors.
            mode: (String) Behavior of tenant session cookie. Accepts either "persistent" or "non-persistent".
            mtls: '(Block List, Max: 1) Configuration for mTLS. (see below for nested schema)'
            no_disclose_enterprise_connections: (Boolean) Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.
            oidc_logout: '(Block List, Max: 1) Settings related to OIDC RP-initiated Logout. (see below for nested schema)'
            oidc_logout_prompt_enabled: (Boolean) When active, users will be presented with a consent prompt to confirm the logout request if the request is not trustworthy. Turn off the consent prompt to bypass user confirmation.
            organizations: '(Block List, Max: 1) The token quota configuration. (see below for nested schema)'
            per_day: (Number) Maximum number of issued tokens per day
            per_hour: (Number) Maximum number of issued tokens per hour
            picture_url: (String) URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
            pushed_authorization_requests_supported: (Boolean) Enable pushed authorization requests.
            remove_alg_from_jwks: (Boolean) Remove alg from jwks(JSON Web Key Sets).
            require_pushed_authorization_requests: (Boolean, Deprecated) This Flag is not supported by the Auth0 Management API and will be removed in the next major release.
            revoke_refresh_token_grant: (Boolean) Delete underlying grant when a refresh token is revoked via the Authentication API.
            rp_logout_end_session_endpoint_discovery: (Boolean) Enable the end_session_endpoint URL in the .well-known discovery configuration.
            sandbox_version: (String) Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.
            session_cookie: '(Block List, Max: 1) Alters behavior of tenant''s session cookie. Contains a single mode property. (see below for nested schema)'
            session_lifetime: (Number) Number of hours during which a session will stay valid.
            sessions: '(Block List, Max: 1) Sessions related settings for the tenant. (see below for nested schema)'
            show_log_link: (Boolean) Whether to show the link to log as part of the default error page (true, default) or not to show the link (false).
            support_email: (String) Support email address for authenticating users.
            support_url: (String) Support URL for authenticating users.
            url: (String) URL to redirect to when an error occurs instead of showing the default error page
            use_scope_descriptions_for_consent: (Boolean) Indicates whether to use scope descriptions for consent.
        importStatements:
            - |-
              # As this is not a resource identifiable by an ID within the Auth0 Management API,
              # tenant can be imported using a random string.
              #
              # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
              #
              # Example:
              terraform import auth0_tenant.my_tenant "82f4f21b-017a-319d-92e7-2291c1ca36c4"
    auth0_token_exchange_profile:
        subCategory: ""
        description: With this resource, you can manage Auth0 Custom Token Exchange Profiles
        name: auth0_token_exchange_profile
        title: auth0_token_exchange_profile
        examples:
            - name: my_token_exchange_profile
              manifest: |-
                {
                  "action_id": "${auth0_action.my_action.id}",
                  "name": "token-exchange-prof",
                  "subject_token_type": "https://acme.com/cis-token",
                  "type": "custom_authentication"
                }
              references:
                action_id: auth0_action.my_action.id
              dependencies:
                auth0_action.my_action: |-
                    {
                      "code": "exports.onExecuteCustomTokenExchange = async (event, api) =\u003e {\n\tconsole.log(\"foo\")\n};\"\n",
                      "deploy": true,
                      "name": "TokenExchange-Action",
                      "supported_triggers": [
                        {
                          "id": "custom-token-exchange",
                          "version": "v1"
                        }
                      ]
                    }
        argumentDocs:
            action_id: (String) Unique identifier of the Action
            created_at: (String) The ISO 8601 formatted date the credential was created.
            id: (String) The ID of this resource.
            name: (String) Name of the token exchange profile.
            subject_token_type: (String) Type of the subject token
            type: (String) Type of the token exchange profile
            updated_at: (String) The ISO 8601 formatted date the credential was updated.
        importStatements:
            - |-
              # This resource can be imported using the token exchange profile ID.
              #
              # Example:
              terraform import auth0_token_exchange_profile.profile "tep_XXXXXXXXXXXXXX"
    auth0_trigger_action:
        subCategory: ""
        description: With this resource, you can bind an action to a trigger. Once an action is created and deployed, it can be attached (i.e. bound) to a trigger so that it will be executed as part of a flow. Ordering of an action within a specific flow is not currently supported when using this resource; the action will get appended to the end of the flow. To precisely manage ordering, it is advised to either do so with the dashboard UI or with the auth0_trigger_bindings resource.
        name: auth0_trigger_action
        title: auth0_trigger_action
        examples:
            - name: post_login_alert_action
              manifest: |-
                {
                  "action_id": "${auth0_action.login_alert.id}",
                  "trigger": "post-login"
                }
              references:
                action_id: auth0_action.login_alert.id
              dependencies:
                auth0_action.login_alert: |-
                    {
                      "code": "exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n",
                      "deploy": true,
                      "name": "Alert after login",
                      "supported_triggers": [
                        {
                          "id": "post-login",
                          "version": "v3"
                        }
                      ]
                    }
        argumentDocs:
            action_id: (String) The ID of the action to bind to the trigger.
            display_name: (String) The name for this action within the trigger. This can be useful for distinguishing between multiple instances of the same action bound to a trigger. Defaults to action name when not provided.
            id: (String) The ID of this resource.
            trigger: '(String) The ID of the trigger to bind with. Available options: post-login, credentials-exchange, pre-user-registration, post-user-registration, post-change-password, send-phone-message, password-reset-post-challenge, custom-email-provider, custom-phone-provider.'
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # trigger and action ID separated by "::" (note the double colon)
              # <trigger>::<actionID>
              #
              # Example:
              terraform import auth0_trigger_action.post_login_action "post-login::28b5c8fa-d371-5734-acf6-d0cf80ead918"
    auth0_trigger_actions:
        subCategory: ""
        description: With this resource, you can bind actions to a trigger. Once actions are created and deployed, they can be attached (i.e. bound) to a trigger so that it will be executed as part of a flow. The list of actions reflects the order in which they will be executed during the appropriate flow.
        name: auth0_trigger_actions
        title: auth0_trigger_actions
        examples:
            - name: login_flow
              manifest: |-
                {
                  "actions": [
                    {
                      "display_name": "${auth0_action.action_foo.name}",
                      "id": "${auth0_action.action_foo.id}"
                    },
                    {
                      "display_name": "${auth0_action.action_bar.name}",
                      "id": "${auth0_action.action_bar.id}"
                    }
                  ],
                  "trigger": "post-login"
                }
              references:
                actions.display_name: auth0_action.action_bar.name
                actions.id: auth0_action.action_bar.id
              dependencies:
                auth0_action.action_bar: |-
                    {
                      "code": "exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"bar\");\n};\"\n",
                      "deploy": true,
                      "name": "Test Trigger Binding Bar",
                      "supported_triggers": [
                        {
                          "id": "post-login",
                          "version": "v3"
                        }
                      ]
                    }
                auth0_action.action_foo: |-
                    {
                      "code": "exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n",
                      "deploy": true,
                      "name": "Test Trigger Binding Foo",
                      "supported_triggers": [
                        {
                          "id": "post-login",
                          "version": "v3"
                        }
                      ]
                    }
        argumentDocs:
            actions: '(Block List, Min: 1) The list of actions bound to this trigger. (see below for nested schema)'
            display_name: (String) The display name of the action within the flow.
            id: (String) The ID of this resource.
            trigger: '(String) The ID of the trigger to bind with. Options include: post-login, credentials-exchange, pre-user-registration, post-user-registration, post-change-password, send-phone-message, password-reset-post-challenge, custom-email-provider, custom-phone-provider.'
        importStatements:
            - |-
              # This resource can be imported using the bindings trigger ID.
              #
              # Example:
              terraform import auth0_trigger_actions.example "post-login"
    auth0_user:
        subCategory: ""
        description: With this resource, you can manage user identities, including resetting passwords, and creating, provisioning, blocking, and deleting users.
        name: auth0_user
        title: auth0_user
        examples:
            - name: user
              manifest: |-
                {
                  "connection_name": "Username-Password-Authentication",
                  "email": "test@test.com",
                  "email_verified": true,
                  "name": "Firstname Lastname",
                  "nickname": "some.nickname",
                  "password": "passpass$12$12",
                  "picture": "https://www.example.com/a-valid-picture-url.jpg",
                  "user_id": "12345",
                  "username": "unique_username"
                }
            - name: auth0_user_with_custom_domain
              manifest: |-
                {
                  "connection_name": "Username-Password-Authentication",
                  "custom_domain_header": "my-custom.domain.org",
                  "email": "change.username@acceptance.test.com",
                  "email_verified": true,
                  "password": "MyPass123$",
                  "username": "your_new_user_"
                }
        argumentDocs:
            app_metadata: (String) Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
            blocked: (Boolean) Indicates whether the user is blocked or not.
            connection_name: (String) Name of the connection from which the user information was sourced.
            custom_domain_header: (String) Sets the Auth0-Custom-Domain header on all requests for this resource. Global setting of provider takes precedence over resource specific param, if both are set.
            email: (String) Email address of the user.
            email_verified: (Boolean) Indicates whether the email address has been verified.
            family_name: '(String) Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled ''Sync user profile attributes at each login''. For more information, see: Configure Identity Provider Connection for User Profile Updates.'
            given_name: '(String) Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled ''Sync user profile attributes at each login''. For more information, see: Configure Identity Provider Connection for User Profile Updates.'
            id: (String) The ID of this resource.
            name: '(String) Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled ''Sync user profile attributes at each login''. For more information, see: Configure Identity Provider Connection for User Profile Updates.'
            nickname: '(String) Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled ''Sync user profile attributes at each login''. For more information, see: Configure Identity Provider Connection for User Profile Updates.'
            password: (String, Sensitive) Initial password for this user. Required for non-passwordless connections (SMS and email).
            phone_number: (String) Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
            phone_verified: (Boolean) Indicates whether the phone number has been verified.
            picture: '(String) Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled ''Sync user profile attributes at each login''. For more information, see: Configure Identity Provider Connection for User Profile Updates.'
            user_id: (String) ID of the user.
            user_metadata: (String) Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
            username: (String) Username of the user. Only valid if the connection requires a username.
            verify_email: (Boolean) Indicates whether the user will receive a verification email after creation. Overrides behavior of email_verified parameter.
        importStatements:
            - |-
              # This resource can be imported using the user ID.
              #
              # Example:
              terraform import auth0_user.user "auth0|111111111111111111111111"
    auth0_user_permission:
        subCategory: ""
        description: With this resource, you can manage user permissions.
        name: auth0_user_permission
        title: auth0_user_permission
        examples:
            - name: user_permission_read
              manifest: |-
                {
                  "permission": "${tolist(auth0_resource_server.resource_server.scopes)[0]}",
                  "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}",
                  "user_id": "${auth0_user.user.id}"
                }
              references:
                resource_server_identifier: auth0_resource_server.resource_server.identifier
                user_id: auth0_user.user.id
              dependencies:
                auth0_resource_server.resource_server: |-
                    {
                      "identifier": "https://api.example.com",
                      "name": "Example Resource Server (Managed by Terraform)",
                      "scopes": [
                        {
                          "description": "Create foos",
                          "value": "create:foo"
                        },
                        {
                          "description": "Create bars",
                          "value": "create:bar"
                        }
                      ]
                    }
                auth0_user.user: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "test@test.com",
                      "email_verified": true,
                      "name": "Firstname Lastname",
                      "nickname": "some.nickname",
                      "password": "passpass$12$12",
                      "picture": "https://www.example.com/a-valid-picture-url.jpg",
                      "user_id": "12345",
                      "username": "unique_username"
                    }
        argumentDocs:
            description: (String) Description of the permission.
            id: (String) The ID of this resource.
            permission: (String) Name of the permission.
            resource_server_identifier: (String) Identifier of the resource server that the permission is associated with.
            resource_server_name: (String) Name of the resource server that the permission is associated with.
            user_id: (String) ID of the user to associate the permission to.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # user ID, resource identifier and permission name separated by "::" (note the double colon)
              # <userID>::<resourceServerIdentifier>::<permission>
              #
              # Example:
              terraform import auth0_user_permission.permission "auth0|111111111111111111111111::https://api.travel0.com/v1::read:posts"
    auth0_user_permissions:
        subCategory: ""
        description: With this resource, you can manage all of a user's permissions.
        name: auth0_user_permissions
        title: auth0_user_permissions
        examples:
            - name: all_user_permissions
              manifest: |-
                {
                  "permissions": [
                    {
                      "name": "${tolist(auth0_resource_server.resource_server.scopes)[0]}",
                      "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}"
                    },
                    {
                      "name": "${tolist(auth0_resource_server.resource_server.scopes)[1]}",
                      "resource_server_identifier": "${auth0_resource_server.resource_server.identifier}"
                    }
                  ],
                  "user_id": "${auth0_user.user.id}"
                }
              references:
                permissions.resource_server_identifier: auth0_resource_server.resource_server.identifier
                user_id: auth0_user.user.id
              dependencies:
                auth0_resource_server.resource_server: |-
                    {
                      "identifier": "https://api.example.com",
                      "name": "Example Resource Server (Managed by Terraform)",
                      "scopes": [
                        {
                          "description": "Create foos",
                          "value": "create:foo"
                        },
                        {
                          "description": "Read foos",
                          "value": "read:foo"
                        }
                      ]
                    }
                auth0_user.user: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "test@test.com",
                      "email_verified": true,
                      "name": "Firstname Lastname",
                      "nickname": "some.nickname",
                      "password": "passpass$12$12",
                      "picture": "https://www.example.com/a-valid-picture-url.jpg",
                      "user_id": "12345",
                      "username": "unique_username"
                    }
        argumentDocs:
            description: (String) Description of the permission.
            id: (String) The ID of this resource.
            name: (String) Name of permission.
            permissions: '(Block Set, Min: 1) List of API permissions granted to the user. (see below for nested schema)'
            resource_server_identifier: (String) Resource server identifier associated with the permission.
            resource_server_name: (String) Name of resource server that the permission is associated with.
            user_id: (String) ID of the user to associate the permission to.
        importStatements:
            - |-
              # This resource can be imported by specifying the user ID

              # Example:
              terraform import auth0_user_permissions.all_user_permissions "auth0|111111111111111111111111"
    auth0_user_role:
        subCategory: ""
        description: With this resource, you can manage assigned roles for a user.
        name: auth0_user_role
        title: auth0_user_role
        examples:
            - name: user_roles
              manifest: |-
                {
                  "role_id": "${auth0_role.admin.id}",
                  "user_id": "${auth0_user.user.id}"
                }
              references:
                role_id: auth0_role.admin.id
                user_id: auth0_user.user.id
              dependencies:
                auth0_role.admin: |-
                    {
                      "description": "Administrator",
                      "name": "admin"
                    }
                auth0_user.user: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "test@test.com",
                      "lifecycle": [
                        {
                          "ignore_changes": [
                            "${roles}"
                          ]
                        }
                      ],
                      "name": "Firstname Lastname",
                      "password": "passpass$12$12",
                      "username": "unique_username"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            role_description: (String) Description of the role.
            role_id: (String) ID of the role assigned to the user.
            role_name: (String) Name of the role.
            user_id: (String) ID of the user.
        importStatements:
            - |-
              # This resource can be imported by specifying the
              # user ID and role ID separated by "::" (note the double colon)
              # <userID>::<roleID>
              #
              # Example:
              terraform import auth0_user_role.user_role "auth0|111111111111111111111111::role_123"
    auth0_user_roles:
        subCategory: ""
        description: With this resource, you can manage assigned roles for a user.
        name: auth0_user_roles
        title: auth0_user_roles
        examples:
            - name: user_roles
              manifest: |-
                {
                  "roles": [
                    "${auth0_role.admin.id}"
                  ],
                  "user_id": "${auth0_user.user.id}"
                }
              references:
                user_id: auth0_user.user.id
              dependencies:
                auth0_role.admin: |-
                    {
                      "description": "Administrator",
                      "name": "admin"
                    }
                auth0_user.user: |-
                    {
                      "connection_name": "Username-Password-Authentication",
                      "email": "test@test.com",
                      "lifecycle": [
                        {
                          "ignore_changes": [
                            "${roles}"
                          ]
                        }
                      ],
                      "name": "Firstname Lastname",
                      "password": "passpass$12$12",
                      "username": "unique_username"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            roles: (Set of String) Set of IDs of roles assigned to the user.
            user_id: (String) ID of the user.
        importStatements:
            - |-
              # This resource can be imported using the user ID.
              #
              # Example:
              terraform import auth0_user_roles.user_roles "auth0|111111111111111111111111"
