// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type GrantInitParameters struct {

	// (Boolean) If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	AllowAnyOrganization *bool `json:"allowAnyOrganization,omitempty" tf:"allow_any_organization,omitempty"`

	// (String) Audience or API Identifier for this grant.
	// Audience or API Identifier for this grant.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (String) ID of the client for this grant.
	// ID of the client for this grant.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
	// Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
	OrganizationUsage *string `json:"organizationUsage,omitempty" tf:"organization_usage,omitempty"`

	// (List of String) Permissions (scopes) included in this grant.
	// Permissions (scopes) included in this grant.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

type GrantObservation struct {

	// (Boolean) If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	AllowAnyOrganization *bool `json:"allowAnyOrganization,omitempty" tf:"allow_any_organization,omitempty"`

	// (String) Audience or API Identifier for this grant.
	// Audience or API Identifier for this grant.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (String) ID of the client for this grant.
	// ID of the client for this grant.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
	// Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
	OrganizationUsage *string `json:"organizationUsage,omitempty" tf:"organization_usage,omitempty"`

	// (List of String) Permissions (scopes) included in this grant.
	// Permissions (scopes) included in this grant.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

type GrantParameters struct {

	// (Boolean) If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	// +kubebuilder:validation:Optional
	AllowAnyOrganization *bool `json:"allowAnyOrganization,omitempty" tf:"allow_any_organization,omitempty"`

	// (String) Audience or API Identifier for this grant.
	// Audience or API Identifier for this grant.
	// +kubebuilder:validation:Optional
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (String) ID of the client for this grant.
	// ID of the client for this grant.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
	// Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
	// +kubebuilder:validation:Optional
	OrganizationUsage *string `json:"organizationUsage,omitempty" tf:"organization_usage,omitempty"`

	// (List of String) Permissions (scopes) included in this grant.
	// Permissions (scopes) included in this grant.
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

// GrantSpec defines the desired state of Grant
type GrantSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GrantParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GrantInitParameters `json:"initProvider,omitempty"`
}

// GrantStatus defines the observed state of Grant.
type GrantStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GrantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Grant is the Schema for the Grants API. Auth0 uses various grant types, or methods by which you grant limited access to your resources to another entity without exposing credentials. The OAuth 2.0 protocol supports several types of grants, which allow different types of access. This resource allows you to create and manage client grants used with configured Auth0 clients.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Grant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.audience) || (has(self.initProvider) && has(self.initProvider.audience))",message="spec.forProvider.audience is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientId) || (has(self.initProvider) && has(self.initProvider.clientId))",message="spec.forProvider.clientId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scopes) || (has(self.initProvider) && has(self.initProvider.scopes))",message="spec.forProvider.scopes is a required parameter"
	Spec   GrantSpec   `json:"spec"`
	Status GrantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GrantList contains a list of Grants
type GrantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Grant `json:"items"`
}

// Repository type metadata.
var (
	Grant_Kind             = "Grant"
	Grant_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Grant_Kind}.String()
	Grant_KindAPIVersion   = Grant_Kind + "." + CRDGroupVersion.String()
	Grant_GroupVersionKind = CRDGroupVersion.WithKind(Grant_Kind)
)

func init() {
	SchemeBuilder.Register(&Grant{}, &GrantList{})
}
